// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Novanet.Entities.Entities;

namespace Novanet.DataAccess.Context;

public partial class Db_NovanetContext : DbContext
{
    public Db_NovanetContext()
    {
    
    }

    public Db_NovanetContext(DbContextOptions<Db_NovanetContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgenciasDireccione> AgenciasDirecciones { get; set; }

    public virtual DbSet<AgenciasMaestro> AgenciasMaestros { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<BasesCallCenterBitacora> BasesCallCenterBitacoras { get; set; }

    public virtual DbSet<BasesCallCenterCatalogoGestione> BasesCallCenterCatalogoGestiones { get; set; }

    public virtual DbSet<BasesCallCenterCliente> BasesCallCenterClientes { get; set; }

    public virtual DbSet<CatalogoAntiguedadLaboral> CatalogoAntiguedadLaborals { get; set; }

    public virtual DbSet<CatalogoCiudade> CatalogoCiudades { get; set; }

    public virtual DbSet<CatalogoColoniasFalsa> CatalogoColoniasFalsas { get; set; }

    public virtual DbSet<CatalogoConfiguracione> CatalogoConfiguraciones { get; set; }

    public virtual DbSet<CatalogoDocumentosRequerido> CatalogoDocumentosRequeridos { get; set; }

    public virtual DbSet<CatalogoDocumentosRequeridosDetalle> CatalogoDocumentosRequeridosDetalles { get; set; }

    public virtual DbSet<CatalogoEstadosCivile> CatalogoEstadosCiviles { get; set; }

    public virtual DbSet<CatalogoFondo> CatalogoFondos { get; set; }

    public virtual DbSet<CatalogoFotosInstalacion> CatalogoFotosInstalacions { get; set; }

    public virtual DbSet<CatalogoMarca> CatalogoMarcas { get; set; }

    public virtual DbSet<CatalogoModelo> CatalogoModelos { get; set; }

    public virtual DbSet<CatalogoOlt> CatalogoOlts { get; set; }

    public virtual DbSet<CatalogoOrigendelCliente> CatalogoOrigendelClientes { get; set; }

    public virtual DbSet<CatalogoPaquete> CatalogoPaquetes { get; set; }

    public virtual DbSet<CatalogoParentesco> CatalogoParentescos { get; set; }

    public virtual DbSet<CatalogoPerfil> CatalogoPerfils { get; set; }

    public virtual DbSet<CatalogoProducto> CatalogoProductos { get; set; }

    public virtual DbSet<CatalogoProveedore> CatalogoProveedores { get; set; }

    public virtual DbSet<CatalogoPuesto> CatalogoPuestos { get; set; }

    public virtual DbSet<CatalogoRangosSalariale> CatalogoRangosSalariales { get; set; }

    public virtual DbSet<CatalogoRazonDeclinar> CatalogoRazonDeclinars { get; set; }

    public virtual DbSet<CatalogoRepresentantesLegale> CatalogoRepresentantesLegales { get; set; }

    public virtual DbSet<CatalogoSistemaDocumento> CatalogoSistemaDocumentos { get; set; }

    public virtual DbSet<CatalogoTipoDeProductoContable> CatalogoTipoDeProductoContables { get; set; }

    public virtual DbSet<CatalogoTipoMovimiento> CatalogoTipoMovimientos { get; set; }

    public virtual DbSet<CatalogoTipoPersona> CatalogoTipoPersonas { get; set; }

    public virtual DbSet<CatalogoTipoProducto> CatalogoTipoProductos { get; set; }

    public virtual DbSet<CatalogoTipoViviendum> CatalogoTipoVivienda { get; set; }

    public virtual DbSet<CatalogoTrabajosFalso> CatalogoTrabajosFalsos { get; set; }

    public virtual DbSet<CatalogoUbicacione> CatalogoUbicaciones { get; set; }

    public virtual DbSet<ClienteReferenciaRespuesta> ClienteReferenciaRespuestas { get; set; }

    public virtual DbSet<ClienteReferencium> ClienteReferencia { get; set; }

    public virtual DbSet<ClientesAtrasadosLinksdePago> ClientesAtrasadosLinksdePagos { get; set; }

    public virtual DbSet<ClientesLinksdePago> ClientesLinksdePagos { get; set; }

    public virtual DbSet<ClientesMaestro> ClientesMaestros { get; set; }

    public virtual DbSet<ClientesMovilLogin> ClientesMovilLogins { get; set; }

    public virtual DbSet<ClientesPerfil> ClientesPerfils { get; set; }

    public virtual DbSet<ClientesReferidosCredito> ClientesReferidosCreditos { get; set; }

    public virtual DbSet<ClientesServiciosBitacora> ClientesServiciosBitacoras { get; set; }

    public virtual DbSet<ClientesServiciosBitacorasConexione> ClientesServiciosBitacorasConexiones { get; set; }

    public virtual DbSet<Contador> Contadors { get; set; }

    public virtual DbSet<ContratistaMaestro> ContratistaMaestros { get; set; }

    public virtual DbSet<ContratistaSolicitudInstalacion> ContratistaSolicitudInstalacions { get; set; }

    public virtual DbSet<ContratistaSolicitudInstalacionDetalle> ContratistaSolicitudInstalacionDetalles { get; set; }

    public virtual DbSet<ContratistaSolicitudInstalacionDetalleCodigoBarra> ContratistaSolicitudInstalacionDetalleCodigoBarras { get; set; }

    public virtual DbSet<CredPrecalificadoOrigenCliente> CredPrecalificadoOrigenClientes { get; set; }

    public virtual DbSet<DevolucionDetalle> DevolucionDetalles { get; set; }

    public virtual DbSet<DevolucionMaestro> DevolucionMaestros { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<EmpresasMaestro> EmpresasMaestros { get; set; }

    public virtual DbSet<EquifaxAddress> EquifaxAddresses { get; set; }

    public virtual DbSet<EquifaxAtrasosMoraHisComTar> EquifaxAtrasosMoraHisComTars { get; set; }

    public virtual DbSet<EquifaxBandeudum> EquifaxBandeuda { get; set; }

    public virtual DbSet<EquifaxBitacora> EquifaxBitacoras { get; set; }

    public virtual DbSet<EquifaxBitacoraWebService> EquifaxBitacoraWebServices { get; set; }

    public virtual DbSet<EquifaxBitacoraWscoreFinanciero> EquifaxBitacoraWscoreFinancieros { get; set; }

    public virtual DbSet<EquifaxCatalogoCapacidadePago> EquifaxCatalogoCapacidadePagos { get; set; }

    public virtual DbSet<EquifaxCatalogoEstado> EquifaxCatalogoEstados { get; set; }

    public virtual DbSet<EquifaxCatalogoOcupacione> EquifaxCatalogoOcupaciones { get; set; }

    public virtual DbSet<EquifaxCatalogoOperacion> EquifaxCatalogoOperacions { get; set; }

    public virtual DbSet<EquifaxCatalogoPerfile> EquifaxCatalogoPerfiles { get; set; }

    public virtual DbSet<EquifaxCatalogoPrecalificado> EquifaxCatalogoPrecalificados { get; set; }

    public virtual DbSet<EquifaxCatalogoScore> EquifaxCatalogoScores { get; set; }

    public virtual DbSet<EquifaxCliente> EquifaxClientes { get; set; }

    public virtual DbSet<EquifaxClientePerfil> EquifaxClientePerfils { get; set; }

    public virtual DbSet<EquifaxClienteTipoPersona> EquifaxClienteTipoPersonas { get; set; }

    public virtual DbSet<EquifaxClientesEstadoPrecalificado> EquifaxClientesEstadoPrecalificados { get; set; }

    public virtual DbSet<EquifaxConDiasAtrasoComTar> EquifaxConDiasAtrasoComTars { get; set; }

    public virtual DbSet<EquifaxConfiguracione> EquifaxConfiguraciones { get; set; }

    public virtual DbSet<EquifaxConteosMoraBancaria12M> EquifaxConteosMoraBancaria12Ms { get; set; }

    public virtual DbSet<EquifaxConteosMoraBancaria18M> EquifaxConteosMoraBancaria18Ms { get; set; }

    public virtual DbSet<EquifaxConteosMoraBancaria24M> EquifaxConteosMoraBancaria24Ms { get; set; }

    public virtual DbSet<EquifaxConteosMoraBancaria36M> EquifaxConteosMoraBancaria36Ms { get; set; }

    public virtual DbSet<EquifaxCorreosElectronico> EquifaxCorreosElectronicos { get; set; }

    public virtual DbSet<EquifaxDeucomer> EquifaxDeucomers { get; set; }

    public virtual DbSet<EquifaxDiasAtrasoConsolidado> EquifaxDiasAtrasoConsolidados { get; set; }

    public virtual DbSet<EquifaxFiadoresDeudaComercial> EquifaxFiadoresDeudaComercials { get; set; }

    public virtual DbSet<EquifaxGarantium> EquifaxGarantia { get; set; }

    public virtual DbSet<EquifaxHighRisk> EquifaxHighRisks { get; set; }

    public virtual DbSet<EquifaxHistoricoBandeudum> EquifaxHistoricoBandeuda { get; set; }

    public virtual DbSet<EquifaxHistoricoDeucomer> EquifaxHistoricoDeucomers { get; set; }

    public virtual DbSet<EquifaxHistoricoTardeudum> EquifaxHistoricoTardeuda { get; set; }

    public virtual DbSet<EquifaxInfoConsulta> EquifaxInfoConsultas { get; set; }

    public virtual DbSet<EquifaxInfoFiadore> EquifaxInfoFiadores { get; set; }

    public virtual DbSet<EquifaxMaximoDiasAtrasoBanca24M> EquifaxMaximoDiasAtrasoBanca24Ms { get; set; }

    public virtual DbSet<EquifaxMorInfo> EquifaxMorInfos { get; set; }

    public virtual DbSet<EquifaxPrimeraReferenciaBandeudum> EquifaxPrimeraReferenciaBandeuda { get; set; }

    public virtual DbSet<EquifaxPrimeraReferenciaDeucomer> EquifaxPrimeraReferenciaDeucomers { get; set; }

    public virtual DbSet<EquifaxPrimeraReferenciaTardeudum> EquifaxPrimeraReferenciaTardeuda { get; set; }

    public virtual DbSet<EquifaxReferenciasImpugnada> EquifaxReferenciasImpugnadas { get; set; }

    public virtual DbSet<EquifaxScore> EquifaxScores { get; set; }

    public virtual DbSet<EquifaxScoreHistorico> EquifaxScoreHistoricos { get; set; }

    public virtual DbSet<EquifaxSicom> EquifaxSicoms { get; set; }

    public virtual DbSet<EquifaxTardeudaExtrafinanciamiento> EquifaxTardeudaExtrafinanciamientos { get; set; }

    public virtual DbSet<EquifaxTardeudum> EquifaxTardeuda { get; set; }

    public virtual DbSet<EquifaxTelefono> EquifaxTelefonos { get; set; }

    public virtual DbSet<FirmaTokenOrion> FirmaTokenOrions { get; set; }

    public virtual DbSet<FirmasOrion> FirmasOrions { get; set; }

    public virtual DbSet<GeoBarrio> GeoBarrios { get; set; }

    public virtual DbSet<GeoBarrioColonium> GeoBarrioColonia { get; set; }

    public virtual DbSet<GeoDepartamento> GeoDepartamentos { get; set; }

    public virtual DbSet<GeoMunicipio> GeoMunicipios { get; set; }

    public virtual DbSet<GeoPai> GeoPais { get; set; }

    public virtual DbSet<GeoPoblado> GeoPoblados { get; set; }

    public virtual DbSet<Ihss> Ihsses { get; set; }

    public virtual DbSet<InventarioMovimientoDetalle> InventarioMovimientoDetalles { get; set; }

    public virtual DbSet<InventarioMovimientoMaestro> InventarioMovimientoMaestros { get; set; }

    public virtual DbSet<ListaNegraIdentidad> ListaNegraIdentidads { get; set; }

    public virtual DbSet<ListaNegraTelefono> ListaNegraTelefonos { get; set; }

    public virtual DbSet<MensajeriaMasivaDetalle> MensajeriaMasivaDetalles { get; set; }

    public virtual DbSet<MigrationHistory> MigrationHistories { get; set; }

    public virtual DbSet<OrionCatalogoContratistaInstalacion> OrionCatalogoContratistaInstalacions { get; set; }

    public virtual DbSet<OrionCatalogoGestion> OrionCatalogoGestions { get; set; }

    public virtual DbSet<OrionClientesBitacora> OrionClientesBitacoras { get; set; }

    public virtual DbSet<OrionEstadodeCuentaUsuario> OrionEstadodeCuentaUsuarios { get; set; }

    public virtual DbSet<OrionEstadodeCuentaUsuarioCatalogoTipoMovimiento> OrionEstadodeCuentaUsuarioCatalogoTipoMovimientos { get; set; }

    public virtual DbSet<OrionSolicitudDeclinada> OrionSolicitudDeclinadas { get; set; }

    public virtual DbSet<OrionSolicitudDetalleClienteServicioContratado> OrionSolicitudDetalleClienteServicioContratados { get; set; }

    public virtual DbSet<OrionSolicitudDocumento> OrionSolicitudDocumentos { get; set; }

    public virtual DbSet<OrionSolicitudEquifaxCliente> OrionSolicitudEquifaxClientes { get; set; }

    public virtual DbSet<OrionSolicitudHistorialMantenimiento> OrionSolicitudHistorialMantenimientos { get; set; }

    public virtual DbSet<OrionSolicitudMaestro> OrionSolicitudMaestros { get; set; }

    public virtual DbSet<PagosPaginaWebDeposito> PagosPaginaWebDepositos { get; set; }

    public virtual DbSet<PaquetesDetalle> PaquetesDetalles { get; set; }

    public virtual DbSet<PaquetesMaestro> PaquetesMaestros { get; set; }

    public virtual DbSet<ParametrosConversionDeMoneda> ParametrosConversionDeMonedas { get; set; }

    public virtual DbSet<PrivilegiosPorRol> PrivilegiosPorRols { get; set; }

    public virtual DbSet<ProductoPreciosDetalle> ProductoPreciosDetalles { get; set; }

    public virtual DbSet<ProductosInventario> ProductosInventarios { get; set; }

    public virtual DbSet<ProductosMaestro> ProductosMaestros { get; set; }

    public virtual DbSet<ProductosMovimientosDetalle> ProductosMovimientosDetalles { get; set; }

    public virtual DbSet<ProductosMovimientosMaestro> ProductosMovimientosMaestros { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RolesPorUsuario> RolesPorUsuarios { get; set; }

    public virtual DbSet<SolicitudInstalacionBitacora> SolicitudInstalacionBitacoras { get; set; }

    public virtual DbSet<SolicitudInstalacionDocumento> SolicitudInstalacionDocumentos { get; set; }

    public virtual DbSet<SolicitudesAdicionProductoDetalle> SolicitudesAdicionProductoDetalles { get; set; }

    public virtual DbSet<SolicitudesAdicionProductoMaestro> SolicitudesAdicionProductoMaestros { get; set; }

    public virtual DbSet<TecnicosPorContratistum> TecnicosPorContratista { get; set; }

    public virtual DbSet<Temporalprueba> Temporalpruebas { get; set; }

    public virtual DbSet<UsuariosMaestro> UsuariosMaestros { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AgenciasDireccione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Agencias_Direcciones");

            entity.Property(e => e.FcCentrodeCosto)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCosto");
            entity.Property(e => e.FcCiudad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcCiudad");
            entity.Property(e => e.FcDepartamento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcDepartamento");
        });

        modelBuilder.Entity<AgenciasMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdagencia).HasName("PK__Agencias__AAAA08FA505D64C7");

            entity.ToTable("Agencias_Maestro");

            entity.Property(e => e.FiIdagencia)
                .ValueGeneratedNever()
                .HasColumnName("fiIDAgencia");
            entity.Property(e => e.FcCentrodeCosto)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCosto");
            entity.Property(e => e.FcCentrodeCostoMaestro)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCostoMaestro");
            entity.Property(e => e.FcCuentaCajaOperativa)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("fcCuentaCajaOperativa");
            entity.Property(e => e.FcCuentaCajaPuente)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("fcCuentaCajaPuente");
            entity.Property(e => e.FcCuentaDesembolsos)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("fcCuentaDesembolsos");
            entity.Property(e => e.FcDireccionFisica)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDireccionFisica");
            entity.Property(e => e.FcNombreAgencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcNombreAgencia");
            entity.Property(e => e.FdAltaAgencia)
                .HasColumnType("datetime")
                .HasColumnName("fdAltaAgencia");
            entity.Property(e => e.FdBajaAgencia)
                .HasColumnType("datetime")
                .HasColumnName("fdBajaAgencia");
            entity.Property(e => e.FdUltimaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("fdUltimaActualizacion");
            entity.Property(e => e.FiEstadoActual).HasColumnName("fiEstadoActual");
            entity.Property(e => e.FiIdbarrioColonia).HasColumnName("fiIDBarrioColonia");
            entity.Property(e => e.FiIdcanal).HasColumnName("fiIDCanal");
            entity.Property(e => e.FiIdciudad).HasColumnName("fiIDCiudad");
            entity.Property(e => e.FiIddepartamento).HasColumnName("fiIDDepartamento");
            entity.Property(e => e.FiIdpais).HasColumnName("fiIDPais");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
            entity.Property(e => e.FiInstalacionGps).HasColumnName("fiInstalacionGPS");
            entity.Property(e => e.FiTipoAgencia).HasColumnName("fiTipoAgencia");
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetRoles");

            entity.HasIndex(e => e.Name, "RoleNameIndex").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256)
                .UseCollation("Modern_Spanish_CI_AS");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetUsers");

            entity.HasIndex(e => e.UserName, "UserNameIndex").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.Email)
                .HasMaxLength(256)
                .UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash).UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.PhoneNumber).UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.SecurityStamp).UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(256)
                .UseCollation("Modern_Spanish_CI_AS");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK_dbo.AspNetUserRoles");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_RoleId");
                        j.HasIndex(new[] { "UserId" }, "IX_UserId");
                        j.IndexerProperty<string>("UserId")
                            .HasMaxLength(128)
                            .UseCollation("Modern_Spanish_CI_AS");
                        j.IndexerProperty<string>("RoleId")
                            .HasMaxLength(128)
                            .UseCollation("Modern_Spanish_CI_AS");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetUserClaims");

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.ClaimType).UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.ClaimValue).UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId }).HasName("PK_dbo.AspNetUserLogins");

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.LoginProvider)
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.ProviderKey)
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.UserId)
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
        });

        modelBuilder.Entity<BasesCallCenterBitacora>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BasesCallCenter_Bitacoras");

            entity.Property(e => e.FcComentarioGestion)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcComentarioGestion");
            entity.Property(e => e.FcTelefonoContacto)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefonoContacto");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaGestion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaGestion");
            entity.Property(e => e.FiIdagente).HasColumnName("fiIDAgente");
            entity.Property(e => e.FiIdbitacora)
                .ValueGeneratedOnAdd()
                .HasColumnName("fiIDBitacora");
            entity.Property(e => e.FiIdcliente).HasColumnName("fiIDCliente");
            entity.Property(e => e.FiIdgestion).HasColumnName("fiIDGestion");
        });

        modelBuilder.Entity<BasesCallCenterCatalogoGestione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BasesCallCenter_CatalogoGestiones");

            entity.Property(e => e.FcGestion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcGestion");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FiIdgestion).HasColumnName("fiIDGestion");
        });

        modelBuilder.Entity<BasesCallCenterCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BasesCallCenter_Clientes");

            entity.Property(e => e.FcCiudad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcCiudad");
            entity.Property(e => e.FcComentarioGestion)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcComentarioGestion");
            entity.Property(e => e.FcIdentidad)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcNombreCliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNombreCliente");
            entity.Property(e => e.FcTelefonoContacto)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcTelefonoContacto");
            entity.Property(e => e.FcTelefonosAdicionales)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcTelefonosAdicionales");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaUltimaGestion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaGestion");
            entity.Property(e => e.FiIdagenteAsignado).HasColumnName("fiIDAgenteAsignado");
            entity.Property(e => e.FiIdcliente)
                .ValueGeneratedOnAdd()
                .HasColumnName("fiIDCliente");
            entity.Property(e => e.FiIdestadoCliente).HasColumnName("fiIDEstadoCliente");
            entity.Property(e => e.FiIdultimaGestion).HasColumnName("fiIDUltimaGestion");
        });

        modelBuilder.Entity<CatalogoAntiguedadLaboral>(entity =>
        {
            entity.HasKey(e => e.FiIdantiguedadLaboral).HasName("PK__Catalogo__B0667429B3C7F808");

            entity.ToTable("Catalogo_AntiguedadLaboral");

            entity.Property(e => e.FiIdantiguedadLaboral).HasColumnName("fiIDAntiguedadLaboral");
            entity.Property(e => e.FcDescripcionAntiguedad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionAntiguedad");
        });

        modelBuilder.Entity<CatalogoCiudade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Ciudades");

            entity.Property(e => e.FcCiudad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcCiudad");
            entity.Property(e => e.FiIdciudad).HasColumnName("fiIDCiudad");
        });

        modelBuilder.Entity<CatalogoColoniasFalsa>(entity =>
        {
            entity.HasKey(e => e.FiIdcoloniaFalsa).HasName("PK__Catalogo__4571BB39AB16CE37");

            entity.ToTable("Catalogo_ColoniasFalsas");

            entity.Property(e => e.FiIdcoloniaFalsa).HasColumnName("fiIDColoniaFalsa");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
        });

        modelBuilder.Entity<CatalogoConfiguracione>(entity =>
        {
            entity.HasKey(e => e.FiIdConfiguraciones).HasName("PK__Catalogo__B30725FCE2893BC8");

            entity.ToTable("Catalogo_Configuraciones");

            entity.Property(e => e.FiIdConfiguraciones).HasColumnName("fiIdConfiguraciones");
            entity.Property(e => e.FcNombreLlave)
                .HasMaxLength(100)
                .HasColumnName("fcNombreLlave");
            entity.Property(e => e.FcValorLlave)
                .HasMaxLength(500)
                .HasColumnName("fcValorLlave");
        });

        modelBuilder.Entity<CatalogoDocumentosRequerido>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_DocumentosRequeridos");

            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FiIddocumentosRequeridos).HasColumnName("fiIDDocumentosRequeridos");
            entity.Property(e => e.FiTipodeIngresos).HasColumnName("fiTipodeIngresos");
        });

        modelBuilder.Entity<CatalogoDocumentosRequeridosDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_DocumentosRequeridos_Detalle");

            entity.Property(e => e.FcDescripcionDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionDocumento");
            entity.Property(e => e.FiIddocumentosRequeridos).HasColumnName("fiIDDocumentosRequeridos");
            entity.Property(e => e.FiIdordenDocumentos).HasColumnName("fiIDOrdenDocumentos");
        });

        modelBuilder.Entity<CatalogoEstadosCivile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_EstadosCiviles");

            entity.Property(e => e.FcDescripcionEstadoCivil)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionEstadoCivil");
            entity.Property(e => e.FiIdestadoCivil).HasColumnName("fiIDEstadoCivil");
        });

        modelBuilder.Entity<CatalogoFondo>(entity =>
        {
            entity.HasKey(e => e.FiIdfondo).HasName("PK_dbo_Catalogo_Fondos_fiIDFondo");

            entity.ToTable("Catalogo_Fondos");

            entity.Property(e => e.FiIdfondo)
                .ValueGeneratedNever()
                .HasColumnName("fiIDFondo");
            entity.Property(e => e.FcBarrio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcBarrio");
            entity.Property(e => e.FcCiudadDomiciliada)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcCiudadDomiciliada");
            entity.Property(e => e.FcConstitucionFondo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcConstitucionFondo");
            entity.Property(e => e.FcDepartamentoDomiciliada)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcDepartamentoDomiciliada");
            entity.Property(e => e.FcEmail)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcEmail");
            entity.Property(e => e.FcNombreComercial)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcNombreComercial");
            entity.Property(e => e.FcNombredelFondo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcNombredelFondo");
            entity.Property(e => e.FcNumeroFolio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcNumeroFolio");
            entity.Property(e => e.FcRazonSocial)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcRazonSocial");
            entity.Property(e => e.FcRegistroMercantil)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcRegistroMercantil");
            entity.Property(e => e.FcRtnempresa)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcRTNEmpresa");
            entity.Property(e => e.FcTelefono)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FcUrlLogo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcUrlLogo");
            entity.Property(e => e.FiEstadodelFondo).HasColumnName("fiEstadodelFondo");
            entity.Property(e => e.FiIdrepresentanteLegal).HasColumnName("fiIDRepresentanteLegal");
            entity.Property(e => e.FiIdtipodeFondo).HasColumnName("fiIDTipodeFondo");
        });

        modelBuilder.Entity<CatalogoFotosInstalacion>(entity =>
        {
            entity.HasKey(e => e.FiIdcatalogoFotosInstalacion).HasName("PK__catalogo__7380D1134F35F656");

            entity.ToTable("catalogo_FotosInstalacion");

            entity.Property(e => e.FiIdcatalogoFotosInstalacion).HasColumnName("fiIDCatalogo_FotosInstalacion");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FcNombreFoto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcNombreFoto");
        });

        modelBuilder.Entity<CatalogoMarca>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Marcas");

            entity.Property(e => e.FcMarca)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcMarca");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiIdmarca).HasColumnName("fiIDMarca");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<CatalogoModelo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Modelos");

            entity.Property(e => e.FcModelo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcModelo");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiIdmarca).HasColumnName("fiIDMarca");
            entity.Property(e => e.FiIdmodelo).HasColumnName("fiIDModelo");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<CatalogoOlt>(entity =>
        {
            entity.HasKey(e => e.FiIdolt);

            entity.ToTable("Catalogo_OLT");

            entity.Property(e => e.FiIdolt).HasColumnName("fiIDOlt");
            entity.Property(e => e.FcDescripcionOlt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionOLT");
            entity.Property(e => e.FcDireccion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcDireccion");
            entity.Property(e => e.FcIpolt)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIPOLT");
            entity.Property(e => e.FcLatitude)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcLatitude");
            entity.Property(e => e.FcLongitud)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcLongitud");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaModificacion");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioModificacion).HasColumnName("fiIDUsuarioModificacion");
        });

        modelBuilder.Entity<CatalogoOrigendelCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CatalogoOrigendelCliente");

            entity.Property(e => e.FcOrigenPrimario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcOrigenPrimario");
            entity.Property(e => e.FcOrigenSecundario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcOrigenSecundario");
            entity.Property(e => e.FiHabilitado).HasColumnName("fiHabilitado");
            entity.Property(e => e.FiLlevaReferencia).HasColumnName("fiLlevaReferencia");
        });

        modelBuilder.Entity<CatalogoPaquete>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Paquetes");

            entity.Property(e => e.FcCampoPaquete)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcCampoPaquete");
            entity.Property(e => e.FcNombrePaquete)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNombrePaquete");
            entity.Property(e => e.FiIdgrupoProducto).HasColumnName("fiIDGrupoProducto");
        });

        modelBuilder.Entity<CatalogoParentesco>(entity =>
        {
            entity.HasKey(e => e.FiIdparentesco);

            entity.ToTable("Catalogo_Parentescos");

            entity.Property(e => e.FiIdparentesco).HasColumnName("fiIDParentesco");
            entity.Property(e => e.FcDescripcionParentesco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionParentesco");
            entity.Property(e => e.FiIdtipoDeParentesco).HasColumnName("fiIDTipoDeParentesco");
        });

        modelBuilder.Entity<CatalogoPerfil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Perfil");

            entity.Property(e => e.FcDescripcionPerfil)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionPerfil");
            entity.Property(e => e.FcDescripcionRequerimientos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionRequerimientos");
            entity.Property(e => e.FcDescripcionTipodeCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionTipodeCliente");
            entity.Property(e => e.FcMensajeObservaciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcMensajeObservaciones");
            entity.Property(e => e.FiAntiguedadEquifaxMaximo).HasColumnName("fiAntiguedadEquifaxMaximo");
            entity.Property(e => e.FiAntiguedadEquifaxMinimo).HasColumnName("fiAntiguedadEquifaxMinimo");
            entity.Property(e => e.FiAntiguedadLaboralMaximo).HasColumnName("fiAntiguedadLaboralMaximo");
            entity.Property(e => e.FiAntiguedadLaboralMinimo).HasColumnName("fiAntiguedadLaboralMinimo");
            entity.Property(e => e.FiAntiguedadNegocioMaximo).HasColumnName("fiAntiguedadNegocioMaximo");
            entity.Property(e => e.FiAntiguedadNegocioMinimo).HasColumnName("fiAntiguedadNegocioMinimo");
            entity.Property(e => e.FiCasaPropia).HasColumnName("fiCasaPropia");
            entity.Property(e => e.FiEdadMaxima).HasColumnName("fiEdadMaxima");
            entity.Property(e => e.FiEdadMinima).HasColumnName("fiEdadMinima");
            entity.Property(e => e.FiGuardiaSeguridad).HasColumnName("fiGuardiaSeguridad");
            entity.Property(e => e.FiIddocumentosRequeridos).HasColumnName("fiIDDocumentosRequeridos");
            entity.Property(e => e.FiIdperfil).HasColumnName("fiIDPerfil");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIhssmaximo).HasColumnName("fiIHSSMaximo");
            entity.Property(e => e.FiIhssminimo).HasColumnName("fiIHSSMinimo");
            entity.Property(e => e.FiLleveYa).HasColumnName("fiLleveYa");
            entity.Property(e => e.FiMaquilaCallcenter).HasColumnName("fiMaquilaCallcenter");
            entity.Property(e => e.FiPermisoOperacion).HasColumnName("fiPermisoOperacion");
            entity.Property(e => e.FiResolucionAnalisis).HasColumnName("fiResolucionAnalisis");
            entity.Property(e => e.FiScoreMaximo).HasColumnName("fiScoreMaximo");
            entity.Property(e => e.FiScoreMinimo).HasColumnName("fiScoreMinimo");
            entity.Property(e => e.FiTipodeCalculoCapcidaddePago).HasColumnName("fiTipodeCalculoCapcidaddePago");
            entity.Property(e => e.FiTipodeIngresos).HasColumnName("fiTipodeIngresos");
            entity.Property(e => e.FnIngresosMaximo)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnIngresosMaximo");
            entity.Property(e => e.FnIngresosMinimo)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnIngresosMinimo");
            entity.Property(e => e.FnMaximoMontoPrestamo)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnMaximoMontoPrestamo");
            entity.Property(e => e.FnOblicacionesMaximo)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnOblicacionesMaximo");
            entity.Property(e => e.FnOblicacionesMinimo)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnOblicacionesMinimo");
        });

        modelBuilder.Entity<CatalogoProducto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Productos");

            entity.Property(e => e.FcNombreGenerico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNombreGenerico");
            entity.Property(e => e.FcProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcProducto");
            entity.Property(e => e.FcTipoDeGarantia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcTipoDeGarantia");
            entity.Property(e => e.FiCantidadReferenciasMinimas).HasColumnName("fiCantidadReferenciasMinimas");
            entity.Property(e => e.FiIdgrupoProducto).HasColumnName("fiIDGrupoProducto");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIdtipoDePlazo).HasColumnName("fiIDTipoDePlazo");
            entity.Property(e => e.FiMonedaPaquete1).HasColumnName("fiMonedaPaquete1");
            entity.Property(e => e.FiMonedaPaquete2).HasColumnName("fiMonedaPaquete2");
            entity.Property(e => e.FiMonedaPaquete3).HasColumnName("fiMonedaPaquete3");
            entity.Property(e => e.FiMonedaPaquete4).HasColumnName("fiMonedaPaquete4");
            entity.Property(e => e.FiMonedaPaquete5).HasColumnName("fiMonedaPaquete5");
            entity.Property(e => e.FiPagaIsv).HasColumnName("fiPagaISV");
            entity.Property(e => e.FiPlazoMaximo).HasColumnName("fiPlazoMaximo");
            entity.Property(e => e.FiPlazoMinimo).HasColumnName("fiPlazoMinimo");
            entity.Property(e => e.FiRequiereGarantia).HasColumnName("fiRequiereGarantia");
            entity.Property(e => e.FiRequiereGps).HasColumnName("fiRequiereGPS");
            entity.Property(e => e.FiRequiereOrigen).HasColumnName("fiRequiereOrigen");
            entity.Property(e => e.FiRequierePrima).HasColumnName("fiRequierePrima");
            entity.Property(e => e.FnMontoFinanciarMaximo)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnMontoFinanciarMaximo");
            entity.Property(e => e.FnMontoFinanciarMinimo)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnMontoFinanciarMinimo");
            entity.Property(e => e.FnPorcentajePrimaMinima)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("fnPorcentajePrimaMinima");
            entity.Property(e => e.FnTasadeInteres)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("fnTasadeInteres");
            entity.Property(e => e.FnValorPaquete1)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorPaquete1");
            entity.Property(e => e.FnValorPaquete2)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorPaquete2");
            entity.Property(e => e.FnValorPaquete3)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorPaquete3");
            entity.Property(e => e.FnValorPaquete4)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorPaquete4");
            entity.Property(e => e.FnValorPaquete5)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorPaquete5");
            entity.Property(e => e.FnValordeContado)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValordeContado");
        });

        modelBuilder.Entity<CatalogoProveedore>(entity =>
        {
            entity.HasKey(e => e.FiIdproveedor).HasName("PK__Catalogo__D65F7B6E7F7073B1");

            entity.ToTable("Catalogo_Proveedores");

            entity.Property(e => e.FiIdproveedor).HasColumnName("fiIDProveedor");
            entity.Property(e => e.FbEstadoProveedor).HasColumnName("fbEstadoProveedor");
            entity.Property(e => e.FcCai)
                .HasMaxLength(50)
                .HasColumnName("fcCAI");
            entity.Property(e => e.FcComentario)
                .HasMaxLength(300)
                .HasColumnName("fcComentario");
            entity.Property(e => e.FcContacto)
                .HasMaxLength(50)
                .HasColumnName("fcContacto");
            entity.Property(e => e.FcCorreoElectronico)
                .HasMaxLength(200)
                .HasColumnName("fcCorreoElectronico");
            entity.Property(e => e.FcDireccion1)
                .HasMaxLength(300)
                .HasColumnName("fcDireccion1");
            entity.Property(e => e.FcDireccion2)
                .HasMaxLength(300)
                .HasColumnName("fcDireccion2");
            entity.Property(e => e.FcNombre)
                .HasMaxLength(60)
                .HasColumnName("fcNombre");
            entity.Property(e => e.FcPrefijoFactura)
                .HasMaxLength(50)
                .HasColumnName("fcPrefijoFactura");
            entity.Property(e => e.FcRangoFinalFactura).HasColumnName("fcRangoFinalFactura");
            entity.Property(e => e.FcRtn)
                .HasMaxLength(20)
                .HasColumnName("fcRTN");
            entity.Property(e => e.FcTelefono)
                .HasMaxLength(20)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FcTelefonoMovil)
                .HasMaxLength(20)
                .HasColumnName("fcTelefonoMovil");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaLimiteEmisionFactura)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaLimiteEmisionFactura");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiCodAldeaPoblado).HasColumnName("fiCodAldeaPoblado");
            entity.Property(e => e.FiCodCiudad).HasColumnName("fiCodCiudad");
            entity.Property(e => e.FiCodDepartamento).HasColumnName("fiCodDepartamento");
            entity.Property(e => e.FiCodPais).HasColumnName("fiCodPais");
            entity.Property(e => e.FiDiasLimiteCredito).HasColumnName("fiDiasLimiteCredito");
            entity.Property(e => e.FiIdcuentaPorPagar).HasColumnName("fiIDCuentaPorPagar");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
            entity.Property(e => e.FiRangoInicialFactura).HasColumnName("fiRangoInicialFactura");
            entity.Property(e => e.FiTipoPersona).HasColumnName("fiTipoPersona");
        });

        modelBuilder.Entity<CatalogoPuesto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Puestos");

            entity.Property(e => e.FcDescripcion)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FiEstado).HasColumnName("fiEstado");
            entity.Property(e => e.FiIdpuesto).HasColumnName("fiIDPuesto");
            entity.Property(e => e.FiOperaDocumentos).HasColumnName("fiOperaDocumentos");
            entity.Property(e => e.FiOperaEfectivo).HasColumnName("fiOperaEfectivo");
            entity.Property(e => e.FiTipoUsuario).HasColumnName("fiTipoUsuario");
        });

        modelBuilder.Entity<CatalogoRangosSalariale>(entity =>
        {
            entity.HasKey(e => e.FiIdcatalogoRangosSalariales).HasName("PK__Catalogo__28A375D14E26B578");

            entity.ToTable("Catalogo_RangosSalariales");

            entity.Property(e => e.FiIdcatalogoRangosSalariales).HasColumnName("fiIDCatalogo_RangosSalariales");
            entity.Property(e => e.FcDescripcionRangosSalariales)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion_RangosSalariales");
        });

        modelBuilder.Entity<CatalogoRazonDeclinar>(entity =>
        {
            entity.HasKey(e => e.FiIdrazon);

            entity.ToTable("Catalogo_RazonDeclinar");

            entity.Property(e => e.FiIdrazon)
                .ValueGeneratedNever()
                .HasColumnName("fiIDRazon");
            entity.Property(e => e.FcRazonDelcinar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcRazonDelcinar");
            entity.Property(e => e.FiEstado).HasColumnName("fiEstado");
        });

        modelBuilder.Entity<CatalogoRepresentantesLegale>(entity =>
        {
            entity.HasKey(e => e.FiIdrepresentanteLegal).HasName("PK_dbo_Catalogo_RepresentantesLegales_fiIDRepresentanteLegal");

            entity.ToTable("Catalogo_RepresentantesLegales");

            entity.Property(e => e.FiIdrepresentanteLegal)
                .ValueGeneratedNever()
                .HasColumnName("fiIDRepresentanteLegal");
            entity.Property(e => e.FcBarrio)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcBarrio");
            entity.Property(e => e.FcCiudadDomicilio)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcCiudadDomicilio");
            entity.Property(e => e.FcDepartamentoDomicilio)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcDepartamentoDomicilio");
            entity.Property(e => e.FcIdentidad)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcNombreCompleto)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcNombreCompleto");
            entity.Property(e => e.FcProfesion)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcProfesion");
            entity.Property(e => e.FiIdestadoCivil).HasColumnName("fiIDEstadoCivil");
            entity.Property(e => e.FiIdnacionalidad)
                .HasDefaultValue(1)
                .HasColumnName("fiIDNacionalidad");
        });

        modelBuilder.Entity<CatalogoSistemaDocumento>(entity =>
        {
            entity.HasKey(e => e.FiIddocumento).HasName("PK__Catalogo__835917601739646A");

            entity.ToTable("Catalogo_Sistema_Documentos");

            entity.Property(e => e.FiIddocumento).HasColumnName("fiIDDocumento");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FcDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcDocumento");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<CatalogoTipoDeProductoContable>(entity =>
        {
            entity.HasKey(e => e.FiIdTipoDeProductoContable).HasName("PK__Catalogo__52DE4B5D8294CA80");

            entity.ToTable("Catalogo_TipoDeProductoContable");

            entity.Property(e => e.FiIdTipoDeProductoContable).HasColumnName("fiIdTipoDeProductoContable");
            entity.Property(e => e.FcCuentaContable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcCuentaContable");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FcToken)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("fcToken");
        });

        modelBuilder.Entity<CatalogoTipoMovimiento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_TipoMovimiento");

            entity.Property(e => e.FcTipoMovimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcTipoMovimiento");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiIdtipoMovimiento).HasColumnName("fiIDTipoMovimiento");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
            entity.Property(e => e.FiTipoAfectacion).HasColumnName("fiTipoAfectacion");
        });

        modelBuilder.Entity<CatalogoTipoPersona>(entity =>
        {
            entity.HasKey(e => e.FiIdtipoPersona).HasName("PK__Catalogo__AC9DE567D7DB37C7");

            entity.ToTable("Catalogo_TipoPersona");

            entity.Property(e => e.FiIdtipoPersona).HasColumnName("fiIDTipoPersona");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(50)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaModificacion");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDusuarioCreacion");
            entity.Property(e => e.FiUsuarioModificacion).HasColumnName("fiUsuarioModificacion");
        });

        modelBuilder.Entity<CatalogoTipoProducto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_TipoProducto");

            entity.Property(e => e.FcTipoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcTipoProducto");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiIdtipoProducto).HasColumnName("fiIDTipoProducto");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<CatalogoTipoViviendum>(entity =>
        {
            entity.HasKey(e => e.FiIdtipoVivienda).HasName("PK_Gral_Catalogo_TipoCatalogo_Vivienda_fiIDTipoVivienda");

            entity.ToTable("Catalogo_TipoVivienda");

            entity.Property(e => e.FiIdtipoVivienda).HasColumnName("fiIDTipoVivienda");
            entity.Property(e => e.FcDescripcionTipoVivienda)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionTipoVivienda");
        });

        modelBuilder.Entity<CatalogoTrabajosFalso>(entity =>
        {
            entity.HasKey(e => e.FiIdtrabajoFalso).HasName("PK__Catalogo__9DB61ED4161F9076");

            entity.ToTable("Catalogo_TrabajosFalsos");

            entity.Property(e => e.FiIdtrabajoFalso).HasColumnName("fiIDTrabajoFalso");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
        });

        modelBuilder.Entity<CatalogoUbicacione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catalogo_Ubicaciones");

            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FcUbicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcUbicacion");
            entity.Property(e => e.FcUbicacionFisica)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcUbicacionFisica");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiEstadoUbicacion).HasColumnName("fiEstadoUbicacion");
            entity.Property(e => e.FiIdubicacion).HasColumnName("fiIDUbicacion");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<ClienteReferenciaRespuesta>(entity =>
        {
            entity.HasKey(e => e.FiIdrespuesta).HasName("PK__Cliente___ACDA90303BEABA98");

            entity.ToTable("Cliente_Referencia_Respuestas");

            entity.Property(e => e.FiIdrespuesta).HasColumnName("fiIDRespuesta");
            entity.Property(e => e.FbAceptoSerReferencia).HasColumnName("fbAceptoSerReferencia");
            entity.Property(e => e.FcRespuesta1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcRespuesta1");
            entity.Property(e => e.FcRespuesta2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcRespuesta2");
            entity.Property(e => e.FcRespuesta3)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcRespuesta3");
            entity.Property(e => e.FiDreferencia).HasColumnName("fiDReferencia");
            entity.Property(e => e.FiRespuestasAcertadas).HasColumnName("fiRespuestasAcertadas");
            entity.Property(e => e.FiRespuestasNoAcertadas).HasColumnName("fiRespuestasNoAcertadas");
        });

        modelBuilder.Entity<ClienteReferencium>(entity =>
        {
            entity.HasKey(e => e.FiIdreferencia);

            entity.ToTable("Cliente_Referencia");

            entity.Property(e => e.FiIdreferencia).HasColumnName("fiIDReferencia");
            entity.Property(e => e.FbAceptoSerRefencia).HasColumnName("fbAceptoSerRefencia");
            entity.Property(e => e.FbReferenciaActivo).HasColumnName("fbReferenciaActivo");
            entity.Property(e => e.FbSinComunicacion).HasColumnName("fbSinComunicacion");
            entity.Property(e => e.FcApellidoReferencia)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("fcApellidoReferencia");
            entity.Property(e => e.FcComentarioDeptoCredito)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcComentarioDeptoCredito");
            entity.Property(e => e.FcLugarTrabajoReferencia)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcLugarTrabajoReferencia");
            entity.Property(e => e.FcNombreCompletoReferencia)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcNombreCompletoReferencia");
            entity.Property(e => e.FcTelefonoReferencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcTelefonoReferencia");
            entity.Property(e => e.FdFechaAnalisis)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaAnalisis");
            entity.Property(e => e.FdFechaCrea)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCrea");
            entity.Property(e => e.FiAceptoSerRefencia).HasColumnName("fiAceptoSerRefencia");
            entity.Property(e => e.FiAnalistaComentario).HasColumnName("fiAnalistaComentario");
            entity.Property(e => e.FiIdClientesMaestro).HasColumnName("fiIdClientesMaestro");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdparentescoReferencia).HasColumnName("fiIDParentescoReferencia");
            entity.Property(e => e.FiIdusuarioCrea).HasColumnName("fiIDUsuarioCrea");
            entity.Property(e => e.FiNumeroConsecutivoCliente).HasColumnName("fiNumeroConsecutivoCliente");
        });

        modelBuilder.Entity<ClientesAtrasadosLinksdePago>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clientes_Atrasados_LinksdePago");

            entity.Property(e => e.FcIdentidad)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcLinkdePago)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("fcLinkdePago");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaMaximoLink)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaMaximoLink");
            entity.Property(e => e.FdFechaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaModificacion");
            entity.Property(e => e.FiIdusuarioCreador).HasColumnName("fiIDUsuarioCreador");
            entity.Property(e => e.FiIdusuarioModificador).HasColumnName("fiIDUsuarioModificador");
            entity.Property(e => e.FiNumerodeCuota).HasColumnName("fiNumerodeCuota");
        });

        modelBuilder.Entity<ClientesLinksdePago>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clientes_LinksdePago");

            entity.Property(e => e.FcIdentidad)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcLinkdePago)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("fcLinkdePago");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaMaximoLink)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaMaximoLink");
            entity.Property(e => e.FdFechaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaModificacion");
            entity.Property(e => e.FiIdusuarioCreador).HasColumnName("fiIDUsuarioCreador");
            entity.Property(e => e.FiIdusuarioModificador).HasColumnName("fiIDUsuarioModificador");
            entity.Property(e => e.FiNumerodeCuota).HasColumnName("fiNumerodeCuota");
        });

        modelBuilder.Entity<ClientesMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdClientesMaestro).HasName("PK__Clientes__F3300B02F23446B5");

            entity.ToTable("Clientes_Maestro");

            entity.Property(e => e.FiIdClientesMaestro).HasColumnName("fiIdClientesMaestro");
            entity.Property(e => e.FbEsEditar).HasColumnName("fbEsEditar");
            entity.Property(e => e.FbTieneHijos).HasColumnName("fbTieneHijos");
            entity.Property(e => e.FcCiudad)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcCiudad");
            entity.Property(e => e.FcCorreo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcCorreo");
            entity.Property(e => e.FcDiaPago).HasColumnName("fcDiaPago");
            entity.Property(e => e.FcDireccionDetallada)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("fcDireccionDetallada");
            entity.Property(e => e.FcGeolocalizacion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("fcGeolocalizacion");
            entity.Property(e => e.FcLugarTrabajo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcLugarTrabajo");
            entity.Property(e => e.FcLugarVive)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcLugarVive");
            entity.Property(e => e.FcProfesion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("fcProfesion");
            entity.Property(e => e.FiAntiguedadLaboral).HasColumnName("fiAntiguedadLaboral");
            entity.Property(e => e.FiCodColonia).HasColumnName("fiCodColonia");
            entity.Property(e => e.FiCodDepartamento).HasColumnName("fiCodDepartamento");
            entity.Property(e => e.FiCodMunicipio).HasColumnName("fiCodMunicipio");
            entity.Property(e => e.FiCodPoblado).HasColumnName("fiCodPoblado");
            entity.Property(e => e.FiEstadoCivil).HasColumnName("fiEstadoCivil");
            entity.Property(e => e.FiEstadoMensaje).HasColumnName("fiEstadoMensaje");
            entity.Property(e => e.FiEstadoProductoServicio).HasColumnName("fiEstadoProductoServicio");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiNumeroConsecutivoCliente).HasColumnName("fiNumeroConsecutivoCliente");
            entity.Property(e => e.FiRangoSalarial).HasColumnName("fiRangoSalarial");
            entity.Property(e => e.FiTipoVivienda)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fiTipoVivienda");
            entity.Property(e => e.FiUbicacionGuardada).HasColumnName("fiUbicacionGuardada");
        });

        modelBuilder.Entity<ClientesMovilLogin>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClientesMovil_Logins");

            entity.Property(e => e.FcNmbreCorto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNmbreCorto");
            entity.Property(e => e.FcNombreUsuario)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcNombreUsuario");
            entity.Property(e => e.FcPassword)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("fcPassword");
            entity.Property(e => e.FcTelefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FcUrlfotoPersonalizda)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("fcURLFotoPersonalizda");
            entity.Property(e => e.FcUsuarioAcceso)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcUsuarioAcceso");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaPrimerAcceso)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaPrimerAcceso");
            entity.Property(e => e.FdFechaUltimoAcceso)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimoAcceso");
            entity.Property(e => e.FiIdcliente).HasColumnName("fiIDCliente");
            entity.Property(e => e.FiIdcuentaFamiliar).HasColumnName("fiIDCuentaFamiliar");
            entity.Property(e => e.FiIdunico)
                .ValueGeneratedOnAdd()
                .HasColumnName("fiIDUnico");
            entity.Property(e => e.FiTipodeUsuario).HasColumnName("fiTipodeUsuario");
        });

        modelBuilder.Entity<ClientesPerfil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clientes_Perfil");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FiAntiguedadRequerida).HasColumnName("fiAntiguedadRequerida");
            entity.Property(e => e.FiCasaPropia).HasColumnName("fiCasaPropia");
            entity.Property(e => e.FiCiudadResidencia).HasColumnName("fiCiudadResidencia");
            entity.Property(e => e.FiEsGuardiadeSeguridad).HasColumnName("fiEsGuardiadeSeguridad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdperfilCliente).HasColumnName("fiIDPerfilCliente");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiMaquilaCallCenter).HasColumnName("fiMaquilaCallCenter");
            entity.Property(e => e.FiOcupacion).HasColumnName("fiOcupacion");
            entity.Property(e => e.FiPermisodeOperacionVigente).HasColumnName("fiPermisodeOperacionVigente");
            entity.Property(e => e.FnIngresos)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnIngresos");
        });

        modelBuilder.Entity<ClientesReferidosCredito>(entity =>
        {
            entity.HasKey(e => e.FiIdclienteReferido).HasName("PK_ClientesReferidosCreditos_fiIDClienteReferido");

            entity.Property(e => e.FiIdclienteReferido).HasColumnName("fiIDClienteReferido");
            entity.Property(e => e.FcNombreReferido)
                .HasMaxLength(200)
                .HasColumnName("fcNombreReferido");
            entity.Property(e => e.FcNumeroTelefono)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcNumeroTelefono");
            entity.Property(e => e.FdFechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaVencimiento)
                .HasColumnType("date")
                .HasColumnName("fdFechaVencimiento");
            entity.Property(e => e.FiIdequifaxClienteReferente).HasColumnName("fiIDEquifaxClienteReferente");
        });

        modelBuilder.Entity<ClientesServiciosBitacora>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clientes_Servicios_Bitacoras");

            entity.Property(e => e.FcComentario)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcComentario");
            entity.Property(e => e.FcInstruccionServicioMensajeria)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("fcInstruccionServicioMensajeria");
            entity.Property(e => e.FcInstruccionWebService)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("fcInstruccionWebService");
            entity.Property(e => e.FcRespuestaServicioMensajeria)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("fcRespuestaServicioMensajeria");
            entity.Property(e => e.FcRespuestaWebService)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("fcRespuestaWebService");
            entity.Property(e => e.FcToken)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechadeMovimiento)
                .HasColumnType("datetime")
                .HasColumnName("fdFechadeMovimiento");
            entity.Property(e => e.FiIdcliente).HasColumnName("fiIDCliente");
            entity.Property(e => e.FiIdestadodeConexion).HasColumnName("fiIDEstadodeConexion");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdtransaccion).HasColumnName("fiIDTransaccion");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<ClientesServiciosBitacorasConexione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clientes_Servicios_BitacorasConexiones");

            entity.Property(e => e.FcContratodeConexion)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcContratodeConexion");
            entity.Property(e => e.FcRespuestaServicio)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("fcRespuestaServicio");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaEjecucion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaEjecucion");
            entity.Property(e => e.FdFechaSolicitud)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaSolicitud");
            entity.Property(e => e.FiIdbitacora)
                .ValueGeneratedOnAdd()
                .HasColumnName("fiIDBitacora");
            entity.Property(e => e.FiIdcliente).HasColumnName("fiIDCliente");
            entity.Property(e => e.FiIdestadoProceso).HasColumnName("fiIDEstadoProceso");
            entity.Property(e => e.FiIdintentos).HasColumnName("fiIDIntentos");
            entity.Property(e => e.FiIdtipodeProceso).HasColumnName("fiIDTipodeProceso");
            entity.Property(e => e.FiIdtransaccionAbono).HasColumnName("fiIDTransaccionAbono");
            entity.Property(e => e.FiIdusuarioSolicitante).HasColumnName("fiIDUSuarioSolicitante");
        });

        modelBuilder.Entity<Contador>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Contador");

            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FiIdapp).HasColumnName("fiIDApp");
            entity.Property(e => e.FiIdconsecutivo).HasColumnName("fiIDConsecutivo");
            entity.Property(e => e.FiNoConsecutivo).HasColumnName("fiNoConsecutivo");
            entity.Property(e => e.FiTipoTransaccion).HasColumnName("fiTipoTransaccion");
        });

        modelBuilder.Entity<ContratistaMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdcontratista).HasName("PK__Contrati__5EFC85711E614CCD");

            entity.ToTable("Contratista_Maestro");

            entity.Property(e => e.FiIdcontratista).HasColumnName("fiIDContratista");
            entity.Property(e => e.FcCorreoElectronico)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcCorreoElectronico");
            entity.Property(e => e.FcDireccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcDireccion");
            entity.Property(e => e.FcNombreEmpresa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcNombreEmpresa");
            entity.Property(e => e.FcNombreEncargado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNombreEncargado");
            entity.Property(e => e.FcRtnEmpresa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("fcRtnEmpresa");
            entity.Property(e => e.FcTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FiIdagencia).HasColumnName("fiIDAgencia");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<ContratistaSolicitudInstalacion>(entity =>
        {
            entity.HasKey(e => e.FiIdcontratistaSolicitud).HasName("PK__Contrati__3C0D5261F5E5E147");

            entity.ToTable("Contratista_SolicitudInstalacion");

            entity.Property(e => e.FiIdcontratistaSolicitud).HasColumnName("fiIDContratistaSolicitud");
            entity.Property(e => e.FcCodigoCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcCodigoCliente");
            entity.Property(e => e.FcComentario)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("fcComentario");
            entity.Property(e => e.FcComentarioInstalacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasColumnName("fcComentarioInstalacion");
            entity.Property(e => e.FcNumeroOrdenCfeus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcNumeroOrdenCfeus");
            entity.Property(e => e.FdFechaInstalacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaInstalacion");
            entity.Property(e => e.FdFechaInstalacionAsignada)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaInstalacionAsignada");
            entity.Property(e => e.FdFechaInstalacionFinal)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaInstalacionFinal");
            entity.Property(e => e.FdFechaInstalacionInicio)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaInstalacionInicio");
            entity.Property(e => e.FiIdagenciaContratista).HasColumnName("fiIDAgenciaContratista");
            entity.Property(e => e.FiIdagenciaInstalacion).HasColumnName("fiIDAgenciaInstalacion");
            entity.Property(e => e.FiIdcontratista).HasColumnName("fiIDContratista");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdestadoInstalacion).HasColumnName("fiIDEstadoInstalacion");
            entity.Property(e => e.FiIdinventarioMovimientoMaestro)
                .HasDefaultValue(0)
                .HasColumnName("fiIDInventarioMovimientoMaestro");
            entity.Property(e => e.FiIdpaquete).HasColumnName("fiIDPaquete");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdtecnicoAsignado).HasColumnName("fiIDTecnicoAsignado");
            entity.Property(e => e.FiIdtipoSolicitud).HasColumnName("fiIDTipoSolicitud");
            entity.Property(e => e.FiIdubicacion)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("fiIDUbicacion");
            entity.Property(e => e.FiIdusuarioCreador).HasColumnName("fiIDUsuarioCreador");
            entity.Property(e => e.FiNoOrden).HasColumnName("fiNoOrden");
            entity.Property(e => e.FiQracceso).HasColumnName("fiQRAcceso");
            entity.Property(e => e.FnMetrosFibra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fnMetrosFibra");

            entity.HasOne(d => d.FiIdagenciaInstalacionNavigation).WithMany(p => p.ContratistaSolicitudInstalacions)
                .HasForeignKey(d => d.FiIdagenciaInstalacion)
                .HasConstraintName("FK_Contratista_Agencias");

            entity.HasOne(d => d.FiIdinventarioMovimientoMaestroNavigation).WithMany(p => p.ContratistaSolicitudInstalacions)
                .HasForeignKey(d => d.FiIdinventarioMovimientoMaestro)
                .HasConstraintName("FK__Contratis__fiIDI__0682EC34");
        });

        modelBuilder.Entity<ContratistaSolicitudInstalacionDetalle>(entity =>
        {
            entity.HasKey(e => e.FiIdcontratistaSolicitudInstalacionDetalle).HasName("PK__Contrati__C44A0438F26E3441");

            entity.ToTable("Contratista_SolicitudInstalacion_Detalle");

            entity.Property(e => e.FiIdcontratistaSolicitudInstalacionDetalle).HasColumnName("fiIDContratista_SolicitudInstalacion_Detalle");
            entity.Property(e => e.FcMac)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("fcMac");
            entity.Property(e => e.FcSerie)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("fcSerie");
            entity.Property(e => e.FiIdcontratistaSolicitudInstalacion).HasColumnName("fiIDContratista_SolicitudInstalacion");
            entity.Property(e => e.FiIdinventario).HasColumnName("fiIDInventario");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FnCantidad)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("fnCantidad");
        });

        modelBuilder.Entity<ContratistaSolicitudInstalacionDetalleCodigoBarra>(entity =>
        {
            entity.HasKey(e => e.FiIdsolicitudCodigoBarras).HasName("PK__Contrati__A594F7CF787DD317");

            entity.ToTable("Contratista_SolicitudInstalacion_Detalle_CodigoBarras");

            entity.Property(e => e.FiIdsolicitudCodigoBarras).HasColumnName("fiIDSolicitudCodigoBarras");
            entity.Property(e => e.FbEstadoInstalacionCodigoBarra).HasColumnName("fbEstadoInstalacionCodigoBarra");
            entity.Property(e => e.FiIdcontratistaSolicitudInstalacionDetalle).HasColumnName("fiIDContratista_SolicitudInstalacion_Detalle");
            entity.Property(e => e.FiIdmoviemiento).HasColumnName("fiIDMoviemiento");
        });

        modelBuilder.Entity<CredPrecalificadoOrigenCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CredPrecalificado_OrigenCliente");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcOrigenPrimario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcOrigenPrimario");
            entity.Property(e => e.FcOrigenSecundario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcOrigenSecundario");
            entity.Property(e => e.FcReferenciaOrigen)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcReferenciaOrigen");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdUltimaActualicion)
                .HasColumnType("datetime")
                .HasColumnName("fdUltimaActualicion");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<DevolucionDetalle>(entity =>
        {
            entity.HasKey(e => e.FiIddevolucionDetalle).HasName("PK__Devolucion__4B318F13071DC4AB");

            entity.ToTable("Devolucion_Detalle");

            entity.Property(e => e.FiIddevolucionDetalle).HasColumnName("fiIDDevolucionDetalle");
            entity.Property(e => e.FcCodigoSerie1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcCodigoSerie1");
            entity.Property(e => e.FcCodigoSerie2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcCodigoSerie2");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FcToken)
                .HasMaxLength(255)
                .IsUnicode(false)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FiIddevolucionMaestro).HasColumnName("fiIDDevolucionMaestro");
            entity.Property(e => e.FiIdinventarioMovimientoDetalle).HasColumnName("fiIDInventarioMovimientoDetalle");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIdusuarioCreado).HasColumnName("fiIDUsuarioCreado");
            entity.Property(e => e.FnCantidad)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("fnCantidad");
        });

        modelBuilder.Entity<DevolucionMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIddevolucionMaestro).HasName("PK__Devolucion__194DC35DEB9A2A11");

            entity.ToTable("Devolucion_Maestro");

            entity.Property(e => e.FiIddevolucionMaestro).HasColumnName("fiIDDevolucionMaestro");
            entity.Property(e => e.FcDocumentoFirma)
                .HasMaxLength(300)
                .IsUnicode(false)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcDocumentoFirma");
            entity.Property(e => e.FcMotivoDevolucion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasColumnName("fcMotivoDevolucion");
            entity.Property(e => e.FcToken)
                .HasMaxLength(300)
                .IsUnicode(false)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiEstadoInventairoMovimientoMaestro).HasColumnName("fiEstadoInventairoMovimientoMaestro");
            entity.Property(e => e.FiFirma).HasColumnName("fiFirma");
            entity.Property(e => e.FiIdinventarioMovimientoMaestro).HasColumnName("fiIDInventarioMovimientoMaestro");
            entity.Property(e => e.FiIdubicacionDestino).HasColumnName("fiIDUbicacionDestino");
            entity.Property(e => e.FiIdubicacionInicial).HasColumnName("fiIDUbicacionInicial");
            entity.Property(e => e.FiIdusuarioCreado).HasColumnName("fiIDUsuarioCreado");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<EmailTemplate>(entity =>
        {
            entity.HasKey(e => e.FiIdemailTemplate).HasName("PK__EmailTem__02D70762038683F8");

            entity.ToTable("EmailTemplate");

            entity.Property(e => e.FiIdemailTemplate).HasColumnName("fiIDEmailTemplate");
            entity.Property(e => e.FbEmailTemplateActive).HasColumnName("fbEmailTemplateActive");
            entity.Property(e => e.FcDescriptionEmailTemplate)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("fcDescriptionEmailTemplate");
            entity.Property(e => e.FcEmailAttachmentName)
                .HasMaxLength(255)
                .HasColumnName("fcEmailAttachmentName");
            entity.Property(e => e.FcEmailBody).HasColumnName("fcEmailBody");
            entity.Property(e => e.FcEmailFooter).HasColumnName("fcEmailFooter");
            entity.Property(e => e.FcEmailSubject)
                .HasMaxLength(255)
                .HasColumnName("fcEmailSubject");
            entity.Property(e => e.FcEmailTitle).HasColumnName("fcEmailTitle");
        });

        modelBuilder.Entity<EmpresasMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdempresa).HasName("PK__Empresas__B00C9B7B35CAE2BD");

            entity.ToTable("Empresas_Maestro");

            entity.Property(e => e.FiIdempresa).HasColumnName("fiIDEmpresa");
            entity.Property(e => e.FcCai)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcCAI");
            entity.Property(e => e.FcCiudadDomiciliada)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcCiudadDomiciliada");
            entity.Property(e => e.FcCorreoElectronico)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcCorreoElectronico");
            entity.Property(e => e.FcDireccionExacta)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("fcDireccionExacta");
            entity.Property(e => e.FcNombreComercial)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcNombreComercial");
            entity.Property(e => e.FcRazonSocial)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcRazonSocial");
            entity.Property(e => e.FcRtn)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcRTN");
            entity.Property(e => e.FcTelefono)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FdFechaModificado)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaModificado");
        });

        modelBuilder.Entity<EquifaxAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_addresses");

            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.DebtorAddress)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("debtorAddress");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.InformationPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("informationPeriod");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxAtrasosMoraHisComTar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_atrasosMoraHisComTar");

            entity.Property(e => e.DiasAtrasoMaximo).HasColumnName("diasAtrasoMaximo");
            entity.Property(e => e.DiasAtrasoMinimo).HasColumnName("diasAtrasoMinimo");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.TipoAcreedores)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoAcreedores");
        });

        modelBuilder.Entity<EquifaxBandeudum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_bandeuda");

            entity.Property(e => e.ActualDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("actualDebt");
            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.CandidateCorrelative).HasColumnName("candidateCorrelative");
            entity.Property(e => e.Category)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.ContingentDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("contingentDebt");
            entity.Property(e => e.CreditorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("creditorName");
            entity.Property(e => e.Cuota)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cuota");
            entity.Property(e => e.Currency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.CurrencyType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("currencyType");
            entity.Property(e => e.DwellingDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("dwellingDebt");
            entity.Property(e => e.EconActivity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("econActivity");
            entity.Property(e => e.ExpDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expDate");
            entity.Property(e => e.ExpiredDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("expiredDebt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.GaveDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gaveDate");
            entity.Property(e => e.GracePeriod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("gracePeriod");
            entity.Property(e => e.IdOrDestiny)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idOrDestiny");
            entity.Property(e => e.IdcreditorName)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("IDcreditorName");
            entity.Property(e => e.InExecutionDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("inExecutionDebt");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InterestRate)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("interestRate");
            entity.Property(e => e.InterestToEarn)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("interestToEarn");
            entity.Property(e => e.ObligationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("obligationType");
            entity.Property(e => e.OperationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("operationNumber");
            entity.Property(e => e.OriginalAmount)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("originalAmount");
            entity.Property(e => e.PayWay)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("payWay");
            entity.Property(e => e.PaymentsQty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("paymentsQty");
            entity.Property(e => e.PeorCategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("peorCategoria");
            entity.Property(e => e.PersonType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("personType");
            entity.Property(e => e.PunishedDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("punishedDebt");
            entity.Property(e => e.SucCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sucCode");
            entity.Property(e => e.SuspenseInterest)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("suspenseInterest");
            entity.Property(e => e.TypeOrDestiny)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("typeOrDestiny");
            entity.Property(e => e.ViewId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength).HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
            entity.Property(e => e.WarrantyType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warrantyType");
            entity.Property(e => e.WarrantyValue)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("warrantyValue");
        });

        modelBuilder.Entity<EquifaxBitacora>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Bitacora");

            entity.Property(e => e.FcCentrodeCosto)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCosto");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcObservaciones)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("fcObservaciones");
            entity.Property(e => e.FdBitacora)
                .HasColumnType("datetime")
                .HasColumnName("fdBitacora");
            entity.Property(e => e.FiIdapp).HasColumnName("fiIDApp");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdoperacion).HasColumnName("fiIDOperacion");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<EquifaxBitacoraWebService>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Bitacora_WebService");

            entity.Property(e => e.FcCentrodeCosto)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCosto");
            entity.Property(e => e.FcCodigoRespuestaEquifax)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("fcCodigoRespuestaEquifax");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcMensajeEquifax)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcMensajeEquifax");
            entity.Property(e => e.FdBitacora)
                .HasColumnType("datetime")
                .HasColumnName("fdBitacora");
            entity.Property(e => e.FiIdapp).HasColumnName("fiIDApp");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<EquifaxBitacoraWscoreFinanciero>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Bitacora_WSCoreFinanciero");

            entity.Property(e => e.FcCentrodeCosto)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCosto");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcMensajeProceso)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcMensajeProceso");
            entity.Property(e => e.FdBitacora)
                .HasColumnType("datetime")
                .HasColumnName("fdBitacora");
            entity.Property(e => e.FiIdapp).HasColumnName("fiIDApp");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
            entity.Property(e => e.FiTipoMensaje).HasColumnName("fiTipoMensaje");
        });

        modelBuilder.Entity<EquifaxCatalogoCapacidadePago>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_CatalogoCapacidadePago");

            entity.Property(e => e.FcDescripcionCapacidadePago)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionCapacidadePago");
            entity.Property(e => e.FiIdcapacidaddepago).HasColumnName("fiIDCapacidaddepago");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiPorcentajeCapacidadePago)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("fiPorcentajeCapacidadePago");
        });

        modelBuilder.Entity<EquifaxCatalogoEstado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_CatalogoEstados");

            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FiIdestadoPrecalificado).HasColumnName("fiIDEstadoPrecalificado");
        });

        modelBuilder.Entity<EquifaxCatalogoOcupacione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_CatalogoOcupaciones");

            entity.Property(e => e.FcOcupacion)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fcOcupacion");
            entity.Property(e => e.FiIdocupacion).HasColumnName("fiIDOcupacion");
            entity.Property(e => e.FiIdperfilPrecalificado).HasColumnName("fiIDPerfilPrecalificado");
        });

        modelBuilder.Entity<EquifaxCatalogoOperacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_CatalogoOperacion");

            entity.Property(e => e.FcOperacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcOperacion");
            entity.Property(e => e.FiIdoperacion).HasColumnName("fiIDOperacion");
        });

        modelBuilder.Entity<EquifaxCatalogoPerfile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Catalogo_Perfiles");

            entity.Property(e => e.FcAccionPerfil)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcAccionPerfil");
            entity.Property(e => e.FcDescripcionPerfil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionPerfil");
            entity.Property(e => e.FcPerfilAsignado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("fcPerfilAsignado");
            entity.Property(e => e.FiOrigenIngresos).HasColumnName("fiOrigenIngresos");
        });

        modelBuilder.Entity<EquifaxCatalogoPrecalificado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_CatalogoPrecalificado");

            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FiResultadoPrecalificado).HasColumnName("fiResultadoPrecalificado");
            entity.Property(e => e.FiTipoClasificacion).HasColumnName("fiTipoClasificacion");
        });

        modelBuilder.Entity<EquifaxCatalogoScore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_CatalogoScores");

            entity.Property(e => e.FcDescripcionProducto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionProducto");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiScoreMinimo).HasColumnName("fiScoreMinimo");
        });

        modelBuilder.Entity<EquifaxCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Cliente");

            entity.Property(e => e.FcArchivoXml)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcArchivoXML");
            entity.Property(e => e.FcCentrodeCostoAsignado)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCostoAsignado");
            entity.Property(e => e.FcCentrodeCostoConsultante)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCostoConsultante");
            entity.Property(e => e.FcCiudadResidencia).HasColumnName("fcCiudadResidencia");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("fcNombre");
            entity.Property(e => e.FcObservacionesCreditos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcObservacionesCreditos");
            entity.Property(e => e.FcTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FdAntiguedadBuroEquifax)
                .HasColumnType("datetime")
                .HasColumnName("fdAntiguedadBuroEquifax");
            entity.Property(e => e.FdAntiguedadBuroPrestadito)
                .HasColumnType("datetime")
                .HasColumnName("fdAntiguedadBuroPrestadito");
            entity.Property(e => e.FdFechaNacimiento)
                .HasColumnType("date")
                .HasColumnName("fdFechaNacimiento");
            entity.Property(e => e.FdFechaPrimerConsulta)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaPrimerConsulta");
            entity.Property(e => e.FdFechaUltimaActualizacionEquifax)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaActualizacionEquifax");
            entity.Property(e => e.FdFechaUltimaConsulta)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaConsulta");
            entity.Property(e => e.FdResolucionCreditos)
                .HasColumnType("datetime")
                .HasColumnName("fdResolucionCreditos");
            entity.Property(e => e.FiCallCenter).HasColumnName("fiCallCenter");
            entity.Property(e => e.FiCargaInicial).HasColumnName("fiCargaInicial");
            entity.Property(e => e.FiClienteCc).HasColumnName("fiClienteCC");
            entity.Property(e => e.FiCne).HasColumnName("fiCNE");
            entity.Property(e => e.FiEstadoActualPrecalificado).HasColumnName("fiEstadoActualPrecalificado");
            entity.Property(e => e.FiIdapp).HasColumnName("fiIDApp");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
            entity.Property(e => e.FiIdusuarioAsignado).HasColumnName("fiIDUsuarioAsignado");
            entity.Property(e => e.FiIdusuarioCreditos).HasColumnName("fiIDUsuarioCreditos");
            entity.Property(e => e.FiIdusuarioUltimaConsulta).HasColumnName("fiIDUsuarioUltimaConsulta");
            entity.Property(e => e.FiIhss).HasColumnName("fiIHSS");
            entity.Property(e => e.FiIncobrable).HasColumnName("fiIncobrable");
            entity.Property(e => e.FiIrrecuperable).HasColumnName("fiIrrecuperable");
            entity.Property(e => e.FiJuridicoLegal).HasColumnName("fiJuridicoLegal");
            entity.Property(e => e.FiMoraComunicaciones).HasColumnName("fiMoraComunicaciones");
            entity.Property(e => e.FiMoraHistorica).HasColumnName("fiMoraHistorica");
            entity.Property(e => e.FiMoraMayor).HasColumnName("fiMoraMayor");
            entity.Property(e => e.FiMoraMenor).HasColumnName("fiMoraMenor");
            entity.Property(e => e.FiOcupacion).HasColumnName("fiOcupacion");
            entity.Property(e => e.FiPlazoAprobado).HasColumnName("fiPlazoAprobado");
            entity.Property(e => e.FiPlazoSeleccionado).HasColumnName("fiPlazoSeleccionado");
            entity.Property(e => e.FiReglaCalculoCapacidad).HasColumnName("fiReglaCalculoCapacidad");
            entity.Property(e => e.FiResolucionCreditos).HasColumnName("fiResolucionCreditos");
            entity.Property(e => e.FiResolucionGeneral).HasColumnName("fiResolucionGeneral");
            entity.Property(e => e.FiResultadoDetallePrecalificado).HasColumnName("fiResultadoDetallePrecalificado");
            entity.Property(e => e.FiResultadoPrecalificado).HasColumnName("fiResultadoPrecalificado");
            entity.Property(e => e.FiSaldosCastigados).HasColumnName("fiSaldosCastigados");
            entity.Property(e => e.FiScoreActual).HasColumnName("fiScoreActual");
            entity.Property(e => e.FiScorePromedio).HasColumnName("fiScorePromedio");
            entity.Property(e => e.FiSobregiro).HasColumnName("fiSobregiro");
            entity.Property(e => e.FiTieneHistorialEquifax).HasColumnName("fiTieneHistorialEquifax");
            entity.Property(e => e.FnCuotaBanca)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnCuotaBanca");
            entity.Property(e => e.FnCuotaComercio)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnCuotaComercio");
            entity.Property(e => e.FnCuotaTarjeta)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnCuotaTarjeta");
            entity.Property(e => e.FnIngresos)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnIngresos");
            entity.Property(e => e.FnMontoAprobado)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnMontoAprobado");
            entity.Property(e => e.FnMontoSeleccionado)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnMontoSeleccionado");
            entity.Property(e => e.FnSaldoBanca)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnSaldoBanca");
            entity.Property(e => e.FnSaldoComercio)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnSaldoComercio");
            entity.Property(e => e.FnSaldoTarjeta)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnSaldoTarjeta");
        });

        modelBuilder.Entity<EquifaxClientePerfil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Cliente_Perfil");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiAntiguedadLaboral).HasColumnName("fiAntiguedadLaboral");
            entity.Property(e => e.FiAntiguedadNegocio).HasColumnName("fiAntiguedadNegocio");
            entity.Property(e => e.FiEsGuardiadeSeguridad).HasColumnName("fiEsGuardiadeSeguridad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdperfil).HasColumnName("fiIDPerfil");
            entity.Property(e => e.FiIdproductoPrecalificado).HasColumnName("fiIDProductoPrecalificado");
            entity.Property(e => e.FiMaquilaoCallCenter).HasColumnName("fiMaquilaoCallCenter");
            entity.Property(e => e.FiOrigenIngresos).HasColumnName("fiOrigenIngresos");
            entity.Property(e => e.FiPermisodeOperacionVigente).HasColumnName("fiPermisodeOperacionVigente");
            entity.Property(e => e.FiTieneCasaPropia).HasColumnName("fiTieneCasaPropia");
        });

        modelBuilder.Entity<EquifaxClienteTipoPersona>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Cliente_TipoPersona");

            entity.Property(e => e.FcNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcNombre");
            entity.Property(e => e.FcRtn)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("fcRtn");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdtipoPersona).HasColumnName("fiIDTipoPersona");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<EquifaxClientesEstadoPrecalificado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Clientes_EstadoPrecalificado");

            entity.Property(e => e.FcEstadoPrecalificado)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcEstadoPrecalificado");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FiEstadoPrecalificado).HasColumnName("fiEstadoPrecalificado");
        });

        modelBuilder.Entity<EquifaxConDiasAtrasoComTar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_conDiasAtrasoComTar");

            entity.Property(e => e.DiasAtrasoMaximo).HasColumnName("diasAtrasoMaximo");
            entity.Property(e => e.DiasAtrasoMinimo).HasColumnName("diasAtrasoMinimo");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.TipoAcreedores).HasColumnName("tipoAcreedores");
        });

        modelBuilder.Entity<EquifaxConfiguracione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Configuraciones");

            entity.Property(e => e.FcPassword)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcPassword");
            entity.Property(e => e.FcPassword1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcPassword1");
            entity.Property(e => e.FcPassword2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcPassword2");
            entity.Property(e => e.FcPassword3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcPassword3");
            entity.Property(e => e.FcPassword4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcPassword4");
            entity.Property(e => e.FcPassword5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcPassword5");
            entity.Property(e => e.FcUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcURL");
            entity.Property(e => e.FcUsuario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcUsuario");
            entity.Property(e => e.FdUltimoCambio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fdUltimoCambio");
        });

        modelBuilder.Entity<EquifaxConteosMoraBancaria12M>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_conteosMoraBancaria12M");

            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("categoriaRiesgo");
            entity.Property(e => e.CodigoFuente)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoFuente");
            entity.Property(e => e.ConteosMora120).HasColumnName("conteosMora120");
            entity.Property(e => e.ConteosMora150).HasColumnName("conteosMora150");
            entity.Property(e => e.ConteosMora180).HasColumnName("conteosMora180");
            entity.Property(e => e.ConteosMora30).HasColumnName("conteosMora30");
            entity.Property(e => e.ConteosMora60).HasColumnName("conteosMora60");
            entity.Property(e => e.ConteosMora90).HasColumnName("conteosMora90");
            entity.Property(e => e.DescripcionMoneda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("descripcionMoneda");
            entity.Property(e => e.DiasMoraMaximo).HasColumnName("diasMoraMaximo");
            entity.Property(e => e.DiasMoraMinimo).HasColumnName("diasMoraMinimo");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FuenteInformacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fuenteInformacion");
            entity.Property(e => e.MayorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("mayorSaldoMora");
            entity.Property(e => e.MenorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("menorSaldoMora");
            entity.Property(e => e.Moneda)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("moneda");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.PeriodoReportadoMoraMasAntiguo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoReportadoMoraMasAntiguo");
            entity.Property(e => e.TotalAtrasos).HasColumnName("totalAtrasos");
            entity.Property(e => e.UltimoPeriodoReportadoMora)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ultimoPeriodoReportadoMora");
        });

        modelBuilder.Entity<EquifaxConteosMoraBancaria18M>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_conteosMoraBancaria18M");

            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("categoriaRiesgo");
            entity.Property(e => e.CodigoFuente)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoFuente");
            entity.Property(e => e.ConteosMora120).HasColumnName("conteosMora120");
            entity.Property(e => e.ConteosMora150).HasColumnName("conteosMora150");
            entity.Property(e => e.ConteosMora180).HasColumnName("conteosMora180");
            entity.Property(e => e.ConteosMora30).HasColumnName("conteosMora30");
            entity.Property(e => e.ConteosMora60).HasColumnName("conteosMora60");
            entity.Property(e => e.ConteosMora90).HasColumnName("conteosMora90");
            entity.Property(e => e.DescripcionMoneda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("descripcionMoneda");
            entity.Property(e => e.DiasMoraMaximo).HasColumnName("diasMoraMaximo");
            entity.Property(e => e.DiasMoraMinimo).HasColumnName("diasMoraMinimo");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FuenteInformacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fuenteInformacion");
            entity.Property(e => e.MayorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("mayorSaldoMora");
            entity.Property(e => e.MenorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("menorSaldoMora");
            entity.Property(e => e.Moneda)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("moneda");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.PeriodoReportadoMoraMasAntiguo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoReportadoMoraMasAntiguo");
            entity.Property(e => e.TotalAtrasos).HasColumnName("totalAtrasos");
            entity.Property(e => e.UltimoPeriodoReportadoMora)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ultimoPeriodoReportadoMora");
        });

        modelBuilder.Entity<EquifaxConteosMoraBancaria24M>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_conteosMoraBancaria24M");

            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("categoriaRiesgo");
            entity.Property(e => e.CodigoFuente)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoFuente");
            entity.Property(e => e.ConteosMora120).HasColumnName("conteosMora120");
            entity.Property(e => e.ConteosMora150).HasColumnName("conteosMora150");
            entity.Property(e => e.ConteosMora180).HasColumnName("conteosMora180");
            entity.Property(e => e.ConteosMora30).HasColumnName("conteosMora30");
            entity.Property(e => e.ConteosMora60).HasColumnName("conteosMora60");
            entity.Property(e => e.ConteosMora90).HasColumnName("conteosMora90");
            entity.Property(e => e.DescripcionMoneda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("descripcionMoneda");
            entity.Property(e => e.DiasMoraMaximo).HasColumnName("diasMoraMaximo");
            entity.Property(e => e.DiasMoraMinimo).HasColumnName("diasMoraMinimo");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FuenteInformacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fuenteInformacion");
            entity.Property(e => e.MayorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("mayorSaldoMora");
            entity.Property(e => e.MenorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("menorSaldoMora");
            entity.Property(e => e.Moneda)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("moneda");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.PeriodoReportadoMoraMasAntiguo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoReportadoMoraMasAntiguo");
            entity.Property(e => e.TotalAtrasos).HasColumnName("totalAtrasos");
            entity.Property(e => e.UltimoPeriodoReportadoMora)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ultimoPeriodoReportadoMora");
        });

        modelBuilder.Entity<EquifaxConteosMoraBancaria36M>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_conteosMoraBancaria36M");

            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("categoriaRiesgo");
            entity.Property(e => e.CodigoFuente)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoFuente");
            entity.Property(e => e.ConteosMora120).HasColumnName("conteosMora120");
            entity.Property(e => e.ConteosMora150).HasColumnName("conteosMora150");
            entity.Property(e => e.ConteosMora180).HasColumnName("conteosMora180");
            entity.Property(e => e.ConteosMora30).HasColumnName("conteosMora30");
            entity.Property(e => e.ConteosMora60).HasColumnName("conteosMora60");
            entity.Property(e => e.ConteosMora90).HasColumnName("conteosMora90");
            entity.Property(e => e.DescripcionMoneda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("descripcionMoneda");
            entity.Property(e => e.DiasMoraMaximo).HasColumnName("diasMoraMaximo");
            entity.Property(e => e.DiasMoraMinimo).HasColumnName("diasMoraMinimo");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FuenteInformacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fuenteInformacion");
            entity.Property(e => e.MayorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("mayorSaldoMora");
            entity.Property(e => e.MenorSaldoMora)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("menorSaldoMora");
            entity.Property(e => e.Moneda)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("moneda");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.PeriodoReportadoMoraMasAntiguo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoReportadoMoraMasAntiguo");
            entity.Property(e => e.TotalAtrasos).HasColumnName("totalAtrasos");
            entity.Property(e => e.UltimoPeriodoReportadoMora)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ultimoPeriodoReportadoMora");
        });

        modelBuilder.Entity<EquifaxCorreosElectronico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_correosElectronico");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.NombreAcreedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombreAcreedor");
            entity.Property(e => e.NumeroReferencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("numeroReferencia");
            entity.Property(e => e.TipoInformacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipoInformacion");
        });

        modelBuilder.Entity<EquifaxDeucomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_deucomer");

            entity.Property(e => e.AccountStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("accountStatus");
            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.AmountCurrency)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("amountCurrency");
            entity.Property(e => e.AmountCurrencyType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("amountCurrencyType");
            entity.Property(e => e.CancelationDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cancelationDate");
            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.ChangeFactor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("changeFactor");
            entity.Property(e => e.CreditType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("creditType");
            entity.Property(e => e.CreditTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("creditTypeCode");
            entity.Property(e => e.Debt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("debt");
            entity.Property(e => e.DebtCurrency)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("debtCurrency");
            entity.Property(e => e.DebtCurrencyType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("debtCurrencyType");
            entity.Property(e => e.DwellCurrency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dwellCurrency");
            entity.Property(e => e.DwellCurrencyType)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dwellCurrencyType");
            entity.Property(e => e.DwellDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellDate");
            entity.Property(e => e.DwellLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dwellLevel");
            entity.Property(e => e.DwellingDebt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellingDebt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.GivedAmount)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("givedAmount");
            entity.Property(e => e.IdInfoSource)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idInfoSource");
            entity.Property(e => e.InfoDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("infoDate");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InfoSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("infoSource");
            entity.Property(e => e.InfoType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("infoType");
            entity.Property(e => e.LastDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("lastDate");
            entity.Property(e => e.NumberOfPayments)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("numberOfPayments");
            entity.Property(e => e.OpenningDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("openningDate");
            entity.Property(e => e.PaymentCurrency)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("paymentCurrency");
            entity.Property(e => e.PaymentCurrencyType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paymentCurrencyType");
            entity.Property(e => e.PaymentValue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paymentValue");
            entity.Property(e => e.Payway)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("payway");
            entity.Property(e => e.PeorNivelDeucomer)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("peorNivelDeucomer");
            entity.Property(e => e.Referencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("referencia");
            entity.Property(e => e.StatusDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("statusDate");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxDiasAtrasoConsolidado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_diasAtrasoConsolidado");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.PeriodoActualBanca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("periodoActualBanca");
            entity.Property(e => e.PeriodoActualComercio)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActualComercio");
            entity.Property(e => e.PeriodoActualTarjeta)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActualTarjeta");
            entity.Property(e => e.VectorDiasAtrasoBanca)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("vectorDiasAtrasoBanca");
            entity.Property(e => e.VectorDiasAtrasoComercio)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("vectorDiasAtrasoComercio");
            entity.Property(e => e.VectorDiasAtrasoTarjeta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("vectorDiasAtrasoTarjeta");
            entity.Property(e => e.VectorSaldosMoraBanca)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("vectorSaldosMoraBanca");
            entity.Property(e => e.VectorSaldosMoraComercio)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("vectorSaldosMoraComercio");
            entity.Property(e => e.VectorSaldosMoraTarjeta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("vectorSaldosMoraTarjeta");
        });

        modelBuilder.Entity<EquifaxFiadoresDeudaComercial>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_fiadoresDeudaComercial");

            entity.Property(e => e.AccountStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("accountStatus");
            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.AmountCurrencyType).HasColumnName("amountCurrencyType");
            entity.Property(e => e.CandidateCorrelative).HasColumnName("candidateCorrelative");
            entity.Property(e => e.ChangeFactor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("changeFactor");
            entity.Property(e => e.CreditType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("creditType");
            entity.Property(e => e.Debt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("debt");
            entity.Property(e => e.DebtCurrencyType).HasColumnName("debtCurrencyType");
            entity.Property(e => e.DwellCurrencyType).HasColumnName("dwellCurrencyType");
            entity.Property(e => e.DwellingDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("dwellingDebt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.GivedAmount)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("givedAmount");
            entity.Property(e => e.Guarantor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("guarantor");
            entity.Property(e => e.IdInfoSource)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idInfoSource");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InfoSource)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("infoSource");
            entity.Property(e => e.LastDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("lastDate");
            entity.Property(e => e.NumeroCre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numeroCRE");
            entity.Property(e => e.NumeroIfi)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numeroIFI");
            entity.Property(e => e.NumeroNit)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numeroNIT");
            entity.Property(e => e.NumeroPas)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numeroPAS");
            entity.Property(e => e.NumeroTip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numeroTIP");
            entity.Property(e => e.OpenningDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("openningDate");
        });

        modelBuilder.Entity<EquifaxGarantium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_Garantia");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIDentidad");
            entity.Property(e => e.FcSerieProducto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcSerieProducto");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaModificacion");
            entity.Property(e => e.FiIdMoneda).HasColumnName("fiIdMoneda");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdequifaxGarantia).HasColumnName("fiIDEquifaxGarantia");
            entity.Property(e => e.FiIdpaquete).HasColumnName("fiIDPaquete");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdusuarioCreador).HasColumnName("fiIDUsuarioCreador");
            entity.Property(e => e.FiIdusuarioModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fiIDUsuarioModificacion");
            entity.Property(e => e.FnPorcentajeImpuesto1)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnPorcentajeImpuesto1");
            entity.Property(e => e.FnPorcentajeImpuesto2)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnPorcentajeImpuesto2");
            entity.Property(e => e.FnValorCuotaMensual)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual");
            entity.Property(e => e.FnValorProductoMe)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorProductoME");
            entity.Property(e => e.FnValorProductoMn)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorProductoMN");
        });

        modelBuilder.Entity<EquifaxHighRisk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_highRisk");

            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.ChangeFactor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("changeFactor");
            entity.Property(e => e.Creditor)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("creditor");
            entity.Property(e => e.Currency)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.CurrencyType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("currencyType");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.IdCreditor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idCreditor");
            entity.Property(e => e.InDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("inDate");
            entity.Property(e => e.InMotivation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("inMotivation");
            entity.Property(e => e.InfoDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("infoDate");
            entity.Property(e => e.TotalDebtAmount)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("totalDebtAmount");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxHistoricoBandeudum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_historicoBandeuda");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("acreedor");
            entity.Property(e => e.CategoriaHistorica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("categoriaHistorica");
            entity.Property(e => e.ConteoHistorico)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("conteoHistorico");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FechaApertura)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaApertura");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.IdAcreedor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idAcreedor");
            entity.Property(e => e.MorosidadHistorica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("morosidadHistorica");
            entity.Property(e => e.NumeroReferencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numeroReferencia");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacionMasReciente)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacionMasReciente");
        });

        modelBuilder.Entity<EquifaxHistoricoDeucomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_historicoDeucomer");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CategoriaHistorica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("categoriaHistorica");
            entity.Property(e => e.ConteoHistorico)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("conteoHistorico");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FechaApertura)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaApertura");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.IdAcreedor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idAcreedor");
            entity.Property(e => e.MorosidadHistorica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("morosidadHistorica");
            entity.Property(e => e.NumeroReferencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacionMasReciente)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacionMasReciente");
        });

        modelBuilder.Entity<EquifaxHistoricoTardeudum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_historicoTardeuda");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ConteoHistoricoDol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("conteoHistoricoDol");
            entity.Property(e => e.ConteoHistoricoLoc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("conteoHistoricoLoc");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FechaApertura)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaApertura");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.IdAcreedor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idAcreedor");
            entity.Property(e => e.MorosidadHistorica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("morosidadHistorica");
            entity.Property(e => e.NumeroReferencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numeroReferencia");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacionMasReciente)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacionMasReciente");
            entity.Property(e => e.VectorCategoriasTar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vectorCategoriasTar");
        });

        modelBuilder.Entity<EquifaxInfoConsulta>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_infoConsultas");

            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.EntityCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("entityCode");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.OfficeCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("officeCode");
            entity.Property(e => e.QueryDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("queryDate");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
            entity.Property(e => e.WhoMadeQuery)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whoMadeQuery");
        });

        modelBuilder.Entity<EquifaxInfoFiadore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_infoFiadores");

            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.Creditor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("creditor");
            entity.Property(e => e.DebtorType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("debtorType");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.IdCreditor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("idCreditor");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.MainDebtorNce)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mainDebtorNCE");
            entity.Property(e => e.MainDebtorNii)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mainDebtorNII");
            entity.Property(e => e.MainDebtorPas)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mainDebtorPAS");
            entity.Property(e => e.MainDebtorRtn)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mainDebtorRTN");
            entity.Property(e => e.MainDebtorTip)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mainDebtorTIP");
            entity.Property(e => e.OperationNumber)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("operationNumber");
            entity.Property(e => e.RiskCategory)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("riskCategory");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxMaximoDiasAtrasoBanca24M>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_maximoDiasAtrasoBanca24M");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("acreedor");
            entity.Property(e => e.CodigoFuente)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("codigoFuente");
            entity.Property(e => e.DiasAtrasoMaximo).HasColumnName("diasAtrasoMaximo");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
        });

        modelBuilder.Entity<EquifaxMorInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_morInfo");

            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.ChangeFactor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("changeFactor");
            entity.Property(e => e.Creditor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("creditor");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.CurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("currencyType");
            entity.Property(e => e.DwellAmount)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellAmount");
            entity.Property(e => e.DwellDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellDate");
            entity.Property(e => e.DwellDays)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("dwellDays");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.IdCreditor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idCreditor");
            entity.Property(e => e.InfoDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("infoDate");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InfoType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("infoType");
            entity.Property(e => e.MorinfoMasReciente)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("morinfoMasReciente");
        });

        modelBuilder.Entity<EquifaxPrimeraReferenciaBandeudum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_primeraReferenciaBandeuda");

            entity.Property(e => e.ActualDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("actualDebt");
            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.CandidateCorrelative).HasColumnName("candidateCorrelative");
            entity.Property(e => e.Category)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Clasificacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("clasificacion");
            entity.Property(e => e.ContingentDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("contingentDebt");
            entity.Property(e => e.CreditorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("creditorName");
            entity.Property(e => e.Currency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DwellingDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("dwellingDebt");
            entity.Property(e => e.EconActivity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("econActivity");
            entity.Property(e => e.ExpDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expDate");
            entity.Property(e => e.ExpiredDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("expiredDebt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.GaveDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gaveDate");
            entity.Property(e => e.GracePeriod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("gracePeriod");
            entity.Property(e => e.IdOrDestiny)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idOrDestiny");
            entity.Property(e => e.IdcreditorName)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("IDcreditorName");
            entity.Property(e => e.InExecutionDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("inExecutionDebt");
            entity.Property(e => e.InExecutionDes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("inExecutionDes");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InterestRate)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("interestRate");
            entity.Property(e => e.InterestToEarn)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("interestToEarn");
            entity.Property(e => e.ObligationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("obligationType");
            entity.Property(e => e.OperationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("operationNumber");
            entity.Property(e => e.OriginalAmount)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("originalAmount");
            entity.Property(e => e.PayWay)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("payWay");
            entity.Property(e => e.PaymentsQty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("paymentsQty");
            entity.Property(e => e.PersonType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("personType");
            entity.Property(e => e.PunishedDebt)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("punishedDebt");
            entity.Property(e => e.PunishedDes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("punishedDes");
            entity.Property(e => e.SucCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sucCode");
            entity.Property(e => e.SuspenseInterest)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("suspenseInterest");
            entity.Property(e => e.TypeOrDestiny)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("typeOrDestiny");
            entity.Property(e => e.ViewId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength).HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
            entity.Property(e => e.WarrantyType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warrantyType");
            entity.Property(e => e.WarrantyValue)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("warrantyValue");
        });

        modelBuilder.Entity<EquifaxPrimeraReferenciaDeucomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_primeraReferenciaDeucomer");

            entity.Property(e => e.AccountStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("accountStatus");
            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.AmountCurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("amountCurrencyType");
            entity.Property(e => e.CancelationDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cancelationDate");
            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.ChangeFactor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("changeFactor");
            entity.Property(e => e.Clasificacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("clasificacion");
            entity.Property(e => e.CreditType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("creditType");
            entity.Property(e => e.CreditTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("creditTypeCode");
            entity.Property(e => e.Debt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("debt");
            entity.Property(e => e.DebtCurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("debtCurrencyType");
            entity.Property(e => e.DwellCurency)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dwellCurency");
            entity.Property(e => e.DwellDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellDate");
            entity.Property(e => e.DwellLevel)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dwellLevel");
            entity.Property(e => e.DwellingDebt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellingDebt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.GivedAmount)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("givedAmount");
            entity.Property(e => e.IdInfoSource)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idInfoSource");
            entity.Property(e => e.InfoDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("infoDate");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InfoSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("infoSource");
            entity.Property(e => e.InfoType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("infoType");
            entity.Property(e => e.LastDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("lastDate");
            entity.Property(e => e.NumberOfPayments)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("numberOfPayments");
            entity.Property(e => e.OpenningDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("openningDate");
            entity.Property(e => e.PaymentCurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("paymentCurrencyType");
            entity.Property(e => e.PaymentValue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paymentValue");
            entity.Property(e => e.Referencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("referencia");
            entity.Property(e => e.StatusDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("statusDate");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxPrimeraReferenciaTardeudum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_primeraReferenciaTardeuda");

            entity.Property(e => e.AccountStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("accountStatus");
            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.CancelationDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cancelationDate");
            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.ChangeFactor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("changeFactor");
            entity.Property(e => e.Coverage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("coverage");
            entity.Property(e => e.CoverageCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("coverageCode");
            entity.Property(e => e.CurrencyTypeGivedLimit)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("currencyTypeGivedLimit");
            entity.Property(e => e.Debt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("debt");
            entity.Property(e => e.DebtCurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("debtCurrencyType");
            entity.Property(e => e.DwellCurency)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dwellCurency");
            entity.Property(e => e.DwellDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellDate");
            entity.Property(e => e.DwellLevel)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dwellLevel");
            entity.Property(e => e.DwellingDebt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellingDebt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.GivedLimit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("givedLimit");
            entity.Property(e => e.IdInfoSource)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idInfoSource");
            entity.Property(e => e.InfoDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("infoDate");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InfoSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("infoSource");
            entity.Property(e => e.MonedaMontoOtorgadoExtraf1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaMontoOtorgadoExtraf1");
            entity.Property(e => e.MonedaMontoOtorgadoExtraf2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaMontoOtorgadoExtraf2");
            entity.Property(e => e.MonedaMontoOtorgadoExtraf3)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaMontoOtorgadoExtraf3");
            entity.Property(e => e.MonedaMontoOtorgadoExtraf4)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaMontoOtorgadoExtraf4");
            entity.Property(e => e.MonedaSaldoExtraf1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaSaldoExtraf1");
            entity.Property(e => e.MonedaSaldoExtraf2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaSaldoExtraf2");
            entity.Property(e => e.MonedaSaldoExtraf3)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaSaldoExtraf3");
            entity.Property(e => e.MonedaSaldoExtraf4)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("monedaSaldoExtraf4");
            entity.Property(e => e.MontoOtorgadoExtrafinanciamiento1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoOtorgadoExtrafinanciamiento1");
            entity.Property(e => e.MontoOtorgadoExtrafinanciamiento2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoOtorgadoExtrafinanciamiento2");
            entity.Property(e => e.MontoOtorgadoExtrafinanciamiento3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoOtorgadoExtrafinanciamiento3");
            entity.Property(e => e.MontoOtorgadoExtrafinanciamiento4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoOtorgadoExtrafinanciamiento4");
            entity.Property(e => e.OpenningDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("openningDate");
            entity.Property(e => e.PaymentCurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("paymentCurrencyType");
            entity.Property(e => e.PaymentValue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paymentValue");
            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("referencia");
            entity.Property(e => e.SaldoExtrafinanciamiento1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento1");
            entity.Property(e => e.SaldoExtrafinanciamiento2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento2");
            entity.Property(e => e.SaldoExtrafinanciamiento3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento3");
            entity.Property(e => e.SaldoExtrafinanciamiento4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento4");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("statusCode");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxReferenciasImpugnada>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_referenciasImpugnadas");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FechaReclamo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaReclamo");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.NombreAcreedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombreAcreedor");
            entity.Property(e => e.NumeroReferencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numeroReferencia");
            entity.Property(e => e.TipoInformacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipoInformacion");
        });

        modelBuilder.Entity<EquifaxScore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_score");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.ValorScore).HasColumnName("valorScore");
        });

        modelBuilder.Entity<EquifaxScoreHistorico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_scoreHistorico");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.Mensaje1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mensaje1");
            entity.Property(e => e.Mensaje2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mensaje2");
            entity.Property(e => e.Mensaje3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mensaje3");
            entity.Property(e => e.PeriodoActual)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoActual");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.TipoScore).HasColumnName("tipoScore");
            entity.Property(e => e.ValorScore)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("valorScore");
            entity.Property(e => e.VectorProducto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vectorProducto");
        });

        modelBuilder.Entity<EquifaxSicom>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_sicom");

            entity.Property(e => e.CandidateCorrelative).HasColumnName("candidateCorrelative");
            entity.Property(e => e.ChangeFactor)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("changeFactor");
            entity.Property(e => e.Creditor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("creditor");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.CurrencyType).HasColumnName("currencyType");
            entity.Property(e => e.DwellAmount)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("dwellAmount");
            entity.Property(e => e.DwellDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellDate");
            entity.Property(e => e.DwellDays).HasColumnName("dwellDays");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.IdCreditor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idCreditor");
            entity.Property(e => e.InfoDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("infoDate");
            entity.Property(e => e.InfoType)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("infoType");
            entity.Property(e => e.MoraMasReciente)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("moraMasReciente");
            entity.Property(e => e.ViewId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength).HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxTardeudaExtrafinanciamiento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_TardeudaExtrafinanciamiento");

            entity.Property(e => e.CodigoFuenteExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoFuenteExt");
            entity.Property(e => e.FactorCambioExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("factorCambioExt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FechaCancelacionExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaCancelacionExt");
            entity.Property(e => e.FechaMoraExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaMoraExt");
            entity.Property(e => e.FechaOtorgamientoExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaOtorgamientoExt");
            entity.Property(e => e.FechaVencimientoExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaVencimientoExt");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.MondedaMontoExt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("mondedaMontoExt");
            entity.Property(e => e.MondedaSaldoExt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("mondedaSaldoExt");
            entity.Property(e => e.MonedaMoraExt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("monedaMoraExt");
            entity.Property(e => e.MonedaPagoMinimoExt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("monedaPagoMinimoExt");
            entity.Property(e => e.MontoExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoExt");
            entity.Property(e => e.NumeroExtrafinanciamiento)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PagoMinimoExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("pagoMinimoExt");
            entity.Property(e => e.PeriodoInformacionExt)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacionExt");
            entity.Property(e => e.PlazoExt)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("plazoExt");
            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SaldoExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExt");
            entity.Property(e => e.SaldoMoraCapitalExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("saldoMoraCapitalExt");
            entity.Property(e => e.SaldoMoraInteresExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("saldoMoraInteresExt");
        });

        modelBuilder.Entity<EquifaxTardeudum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_tardeuda");

            entity.Property(e => e.AccountStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("accountStatus");
            entity.Property(e => e.ActualPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("actualPeriod");
            entity.Property(e => e.AditionalCardsQuantity)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("aditionalCardsQuantity");
            entity.Property(e => e.CancelationDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cancelationDate");
            entity.Property(e => e.CandidateCorrelative)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("candidateCorrelative");
            entity.Property(e => e.ChangeFactor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("changeFactor");
            entity.Property(e => e.Coverage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("coverage");
            entity.Property(e => e.CoverageCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("coverageCode");
            entity.Property(e => e.CurrencyTypeGivedLimit)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("currencyTypeGivedLimit");
            entity.Property(e => e.Debt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("debt");
            entity.Property(e => e.DebtCurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("debtCurrencyType");
            entity.Property(e => e.DwellCountDollar)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellCountDollar");
            entity.Property(e => e.DwellCountLempira)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellCountLempira");
            entity.Property(e => e.DwellCurency)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dwellCurency");
            entity.Property(e => e.DwellDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellDate");
            entity.Property(e => e.DwellLevel)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dwellLevel");
            entity.Property(e => e.DwellingDebt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwellingDebt");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FechaOtorgamientoExtrafinanciamiento1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaOtorgamientoExtrafinanciamiento1");
            entity.Property(e => e.FechaOtorgamientoExtrafinanciamiento2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaOtorgamientoExtrafinanciamiento2");
            entity.Property(e => e.FechaOtorgamientoExtrafinanciamiento3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaOtorgamientoExtrafinanciamiento3");
            entity.Property(e => e.FechaOtorgamientoExtrafinanciamiento4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaOtorgamientoExtrafinanciamiento4");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.GivedLimit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("givedLimit");
            entity.Property(e => e.IdInfoSource)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("idInfoSource");
            entity.Property(e => e.InfoDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("infoDate");
            entity.Property(e => e.InfoPeriod)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("infoPeriod");
            entity.Property(e => e.InfoSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("infoSource");
            entity.Property(e => e.MontoExtrafinanciamiento1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoExtrafinanciamiento1");
            entity.Property(e => e.MontoExtrafinanciamiento2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoExtrafinanciamiento2");
            entity.Property(e => e.MontoExtrafinanciamiento3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoExtrafinanciamiento3");
            entity.Property(e => e.MontoExtrafinanciamiento4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("montoExtrafinanciamiento4");
            entity.Property(e => e.OpenningDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("openningDate");
            entity.Property(e => e.OverdraftDollar)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("overdraftDollar");
            entity.Property(e => e.OverdraftLempira)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("overdraftLempira");
            entity.Property(e => e.PaymentCurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("paymentCurrencyType");
            entity.Property(e => e.PaymentValue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paymentValue");
            entity.Property(e => e.PeorNivelTardeuda)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("peorNivelTardeuda");
            entity.Property(e => e.PlazoExtrafinanciamiento1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plazoExtrafinanciamiento1");
            entity.Property(e => e.PlazoExtrafinanciamiento2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plazoExtrafinanciamiento2");
            entity.Property(e => e.PlazoExtrafinanciamiento3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plazoExtrafinanciamiento3");
            entity.Property(e => e.PlazoExtrafinanciamiento4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plazoExtrafinanciamiento4");
            entity.Property(e => e.Referencia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("referencia");
            entity.Property(e => e.SaldoExtrafinanciamiento1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento1");
            entity.Property(e => e.SaldoExtrafinanciamiento2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento2");
            entity.Property(e => e.SaldoExtrafinanciamiento3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento3");
            entity.Property(e => e.SaldoExtrafinanciamiento4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("saldoExtrafinanciamiento4");
            entity.Property(e => e.StatusDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("statusDate");
            entity.Property(e => e.ViewId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("viewId");
            entity.Property(e => e.ViewLength)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("viewLength");
            entity.Property(e => e.ViewReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("viewReturnCode");
        });

        modelBuilder.Entity<EquifaxTelefono>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equifax_telefonos");

            entity.Property(e => e.CodigoAcreedor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoAcreedor");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FechaInformacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fechaInformacion");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.NombreAcreedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("nombreAcreedor");
            entity.Property(e => e.NumeroTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numeroTelefono");
            entity.Property(e => e.PeriodoInformacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("periodoInformacion");
            entity.Property(e => e.TipoTelefono)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoTelefono");
        });

        modelBuilder.Entity<FirmaTokenOrion>(entity =>
        {
            entity.HasKey(e => e.FiIdtoken);

            entity.ToTable("FirmaToken_Orion");

            entity.Property(e => e.FiIdtoken).HasColumnName("fiIDToken");
            entity.Property(e => e.FcToken)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FiIdestado).HasColumnName("fiIDEstado");
            entity.Property(e => e.FiIdfirma).HasColumnName("fiIDFirma");
        });

        modelBuilder.Entity<FirmasOrion>(entity =>
        {
            entity.HasKey(e => e.FiIdfirma);

            entity.ToTable("Firmas_Orion");

            entity.Property(e => e.FiIdfirma).HasColumnName("fiIDFirma");
            entity.Property(e => e.FcFirma)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnType("text")
                .HasColumnName("fcFirma");
            entity.Property(e => e.FdFechaFirma)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaFirma");
            entity.Property(e => e.FiIdestado).HasColumnName("fiIDEstado");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdtipoDocumento).HasColumnName("fiIDTipoDocumento");
        });

        modelBuilder.Entity<GeoBarrio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Geo_Barrio");

            entity.Property(e => e.FcBarrio)
                .HasMaxLength(50)
                .HasColumnName("fcBarrio");
            entity.Property(e => e.FiCodBarrio).HasColumnName("fiCodBarrio");
            entity.Property(e => e.FiCodDepartamento).HasColumnName("fiCodDepartamento");
            entity.Property(e => e.FiCodMunicipio).HasColumnName("fiCodMunicipio");
            entity.Property(e => e.FiCodPais).HasColumnName("fiCodPais");
        });

        modelBuilder.Entity<GeoBarrioColonium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Geo_BarrioColonia");

            entity.Property(e => e.FcBarrio)
                .HasMaxLength(50)
                .HasColumnName("fcBarrio");
            entity.Property(e => e.FiCodBarrio).HasColumnName("fiCodBarrio");
            entity.Property(e => e.FiCodDepartamento).HasColumnName("fiCodDepartamento");
            entity.Property(e => e.FiCodMunicipio).HasColumnName("fiCodMunicipio");
            entity.Property(e => e.FiCodPais).HasColumnName("fiCodPais");
            entity.Property(e => e.FiCodPoblado).HasColumnName("fiCodPoblado");
            entity.Property(e => e.FiIdzonaCobranza).HasColumnName("fiIDZonaCobranza");
        });

        modelBuilder.Entity<GeoDepartamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Geo_Departamento");

            entity.Property(e => e.FcDepartamento)
                .HasMaxLength(50)
                .HasColumnName("fcDepartamento");
            entity.Property(e => e.FiCodDepartamento).HasColumnName("fiCodDepartamento");
            entity.Property(e => e.FiCodPais).HasColumnName("fiCodPais");
        });

        modelBuilder.Entity<GeoMunicipio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Geo_Municipio");

            entity.Property(e => e.FcMunicipio)
                .HasMaxLength(50)
                .HasColumnName("fcMunicipio");
            entity.Property(e => e.FiCodDepartamento).HasColumnName("fiCodDepartamento");
            entity.Property(e => e.FiCodMunicipio).HasColumnName("fiCodMunicipio");
            entity.Property(e => e.FiCodPais).HasColumnName("fiCodPais");
        });

        modelBuilder.Entity<GeoPai>(entity =>
        {
            entity.HasKey(e => e.FiCodPais).HasName("PK__Geo_Pais__CCED279EDA62718D");

            entity.ToTable("Geo_Pais");

            entity.Property(e => e.FiCodPais).HasColumnName("fiCodPais");
            entity.Property(e => e.FcAbreviacionMoneda)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("fcAbreviacionMoneda");
            entity.Property(e => e.FcDominoInternet)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("fcDominoInternet");
            entity.Property(e => e.FcNombreMoneda)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcNombreMoneda");
            entity.Property(e => e.FcPais)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcPais");
            entity.Property(e => e.FcSimboloMoneda)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("fcSimboloMoneda");
        });

        modelBuilder.Entity<GeoPoblado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Geo_Poblado");

            entity.Property(e => e.FcPoblado)
                .HasMaxLength(50)
                .HasColumnName("fcPoblado");
            entity.Property(e => e.FiCodDepartamento).HasColumnName("fiCodDepartamento");
            entity.Property(e => e.FiCodMunicipio).HasColumnName("fiCodMunicipio");
            entity.Property(e => e.FiCodPais).HasColumnName("fiCodPais");
            entity.Property(e => e.FiCodPoblado).HasColumnName("fiCodPoblado");
        });

        modelBuilder.Entity<Ihss>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IHSS");

            entity.Property(e => e.FcCiudad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcCiudad");
            entity.Property(e => e.FcDireccion2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcDireccion2");
            entity.Property(e => e.FcDireccionEmpresa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcDIreccionEmpresa");
            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcNombreEmpleado)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("fcNombreEmpleado");
            entity.Property(e => e.FcNombreEmpresa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("fcNombreEmpresa");
            entity.Property(e => e.FcRazonEmpresa)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("fcRazonEmpresa");
            entity.Property(e => e.FcTelefono1)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("fcTelefono1");
            entity.Property(e => e.FcTelefono2)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("fcTelefono2");
            entity.Property(e => e.FcTelefono3)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("fcTelefono3");
            entity.Property(e => e.FcTelefonoEmpresa)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("fcTelefonoEmpresa");
        });

        modelBuilder.Entity<InventarioMovimientoDetalle>(entity =>
        {
            entity.HasKey(e => e.FiIdinventarioMovimientoDetalle).HasName("PK__Inventar__4B318F13071DC4AB");

            entity.ToTable("Inventario_Movimiento_Detalle");

            entity.Property(e => e.FiIdinventarioMovimientoDetalle).HasColumnName("fiIDInventarioMovimientoDetalle");
            entity.Property(e => e.FcCodigoSerie1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcCodigoSerie1");
            entity.Property(e => e.FcCodigoSerie2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcCodigoSerie2");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FcToken)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FiIdinventarioMovimientoMaestro).HasColumnName("fiIDInventarioMovimientoMaestro");
            entity.Property(e => e.FiIdmovimiento).HasColumnName("fiIDMovimiento");
            entity.Property(e => e.FiIdtipoMovimiento).HasColumnName("fiIDTipoMovimiento");
            entity.Property(e => e.FiIdubicacionDestino).HasColumnName("fiIDUbicacionDestino");
            entity.Property(e => e.FiIdubicacionInicial).HasColumnName("fiIDUbicacionInicial");
            entity.Property(e => e.FiIdusuarioCreado).HasColumnName("fiIDUsuarioCreado");
            entity.Property(e => e.FnCantidad)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("fnCantidad");
        });

        modelBuilder.Entity<InventarioMovimientoMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdinventarioMovimientoMaestro).HasName("PK__Inventar__194DC35DEB9A2A11");

            entity.ToTable("Inventario_Movimiento_Maestro");

            entity.Property(e => e.FiIdinventarioMovimientoMaestro).HasColumnName("fiIDInventarioMovimientoMaestro");
            entity.Property(e => e.FcDocumentoFirma)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcDocumentoFirma");
            entity.Property(e => e.FcToken)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiEstadoInventairoMovimientoMaestro).HasColumnName("fiEstadoInventairoMovimientoMaestro");
            entity.Property(e => e.FiFirma).HasColumnName("fiFirma");
            entity.Property(e => e.FiIdtipoMovimiento).HasColumnName("fiIDTipoMovimiento");
            entity.Property(e => e.FiIdubicacion).HasColumnName("fiIDUbicacion");
            entity.Property(e => e.FiIdubicacionDestino)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("fiIDUbicacionDestino");
            entity.Property(e => e.FiIdusuarioCreado).HasColumnName("fiIDUsuarioCreado");
            entity.Property(e => e.FiIdusuarioDestino).HasColumnName("fiIDUsuarioDestino");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<ListaNegraIdentidad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ListaNegra_Identidad");

            entity.Property(e => e.FcIdentidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIdentidad");
            entity.Property(e => e.FcRazon)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcRazon");
            entity.Property(e => e.FdRegistro)
                .HasColumnType("datetime")
                .HasColumnName("fdRegistro");
            entity.Property(e => e.FiIdsesion).HasColumnName("fiIDSesion");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<ListaNegraTelefono>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ListaNegra_Telefonos");

            entity.Property(e => e.FcCentrodeCosto)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCosto");
            entity.Property(e => e.FcObservaciones)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("fcObservaciones");
            entity.Property(e => e.FcTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FdRegistro)
                .HasColumnType("datetime")
                .HasColumnName("fdRegistro");
            entity.Property(e => e.FiIdapp).HasColumnName("fiIDApp");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<MensajeriaMasivaDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MensajeriaMasiva_Detalle");

            entity.Property(e => e.FcArchivoUrl)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("fcArchivoURL");
            entity.Property(e => e.FcMensaje)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("fcMensaje");
            entity.Property(e => e.FcRespuestaWs)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("fcRespuestaWS");
            entity.Property(e => e.FcTelefonoDestino)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefonoDestino");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechadeCarga)
                .HasColumnType("datetime")
                .HasColumnName("fdFechadeCarga");
            entity.Property(e => e.FdFechadeEnvio)
                .HasColumnType("datetime")
                .HasColumnName("fdFechadeEnvio");
            entity.Property(e => e.FiIdmensaje)
                .ValueGeneratedOnAdd()
                .HasColumnName("fiIDMensaje");
            entity.Property(e => e.FiIdusuarioRemitente).HasColumnName("fiIDUsuarioRemitente");
        });

        modelBuilder.Entity<MigrationHistory>(entity =>
        {
            entity.HasKey(e => new { e.MigrationId, e.ContextKey }).HasName("PK_dbo.__MigrationHistory");

            entity.ToTable("__MigrationHistory");

            entity.Property(e => e.MigrationId)
                .HasMaxLength(150)
                .UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.ContextKey)
                .HasMaxLength(300)
                .UseCollation("Modern_Spanish_CI_AS");
            entity.Property(e => e.Model).IsRequired();
            entity.Property(e => e.ProductVersion)
                .IsRequired()
                .HasMaxLength(32)
                .UseCollation("Modern_Spanish_CI_AS");
        });

        modelBuilder.Entity<OrionCatalogoContratistaInstalacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Orion_CatalogoContratista_Instalacion");

            entity.Property(e => e.FcClase)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcClase");
            entity.Property(e => e.FcDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDescripcion");
            entity.Property(e => e.FiActivo).HasColumnName("fiActivo");
            entity.Property(e => e.FiIdestadoInstalacion).HasColumnName("fiIDEstadoInstalacion");
        });

        modelBuilder.Entity<OrionCatalogoGestion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Orion_Catalogo_Gestion");

            entity.Property(e => e.FcGestion)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcGestion");
            entity.Property(e => e.FiActualizaDatos).HasColumnName("fiActualizaDatos");
            entity.Property(e => e.FiContactado).HasColumnName("fiContactado");
            entity.Property(e => e.FiFavorable).HasColumnName("fiFavorable");
            entity.Property(e => e.FiIdgestion).HasColumnName("fiIDGestion");
            entity.Property(e => e.FiOpcionManual).HasColumnName("fiOpcionManual");
            entity.Property(e => e.FiRequiereDocumentos).HasColumnName("fiRequiereDocumentos");
            entity.Property(e => e.FiSeguimiento).HasColumnName("fiSeguimiento");
            entity.Property(e => e.FiTipoGestion).HasColumnName("fiTipoGestion");
            entity.Property(e => e.FiTipoPuesto).HasColumnName("fiTipoPuesto");
        });

        modelBuilder.Entity<OrionClientesBitacora>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Orion_Clientes_Bitacoras");

            entity.Property(e => e.FcBitacora)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcBitacora");
            entity.Property(e => e.FcIdcliente)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIDCliente");
            entity.Property(e => e.FcLatitud)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcLatitud");
            entity.Property(e => e.FcLongitud)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcLongitud");
            entity.Property(e => e.FcTelefono)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefono");
            entity.Property(e => e.FdFechaVolveraLlamar)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaVolveraLlamar");
            entity.Property(e => e.FdGestion)
                .HasColumnType("datetime")
                .HasColumnName("fdGestion");
            entity.Property(e => e.FiIdgestion).HasColumnName("fiIDGestion");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
            entity.Property(e => e.FiOrigenGestion).HasColumnName("fiOrigenGestion");
            entity.Property(e => e.FiSmsenviado).HasColumnName("fiSMSEnviado");
            entity.Property(e => e.FiTelefonoContesta).HasColumnName("fiTelefonoContesta");
            entity.Property(e => e.FiUbicacionGestion).HasColumnName("fiUbicacionGestion");
            entity.Property(e => e.FiWhatsAppEnviado).HasColumnName("fiWhatsAppEnviado");
        });

        modelBuilder.Entity<OrionEstadodeCuentaUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Orion_EstadodeCuentaUsuario");

            entity.Property(e => e.FcReferencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcReferencia");
            entity.Property(e => e.FcToken)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaMovimiento)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaMovimiento");
            entity.Property(e => e.FdFechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaRegistro");
            entity.Property(e => e.FiIdequifax).HasColumnName("fiIDEquifax");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdunico)
                .ValueGeneratedOnAdd()
                .HasColumnName("fiIDUnico");
            entity.Property(e => e.FiIdusuarioAsignado).HasColumnName("fiIDUsuarioAsignado");
            entity.Property(e => e.FiIdusuarioMovimiento).HasColumnName("fiIDUsuarioMovimiento");
            entity.Property(e => e.FiTipoMovimiento).HasColumnName("fiTipoMovimiento");
            entity.Property(e => e.FnValorMovimiento)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorMovimiento");
        });

        modelBuilder.Entity<OrionEstadodeCuentaUsuarioCatalogoTipoMovimiento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Orion_EstadodeCuentaUsuario_CatalogoTipoMovimiento");

            entity.Property(e => e.FcTipoMovimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcTipoMovimiento");
            entity.Property(e => e.FcToken)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FiTipoMovimiento).HasColumnName("fiTipoMovimiento");
            entity.Property(e => e.FnTipoAfectacion)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnTipoAfectacion");
        });

        modelBuilder.Entity<OrionSolicitudDeclinada>(entity =>
        {
            entity.HasKey(e => e.FiIddeclinada);

            entity.ToTable("OrionSolicitud_Declinadas");

            entity.Property(e => e.FiIddeclinada).HasColumnName("fiIDDeclinada");
            entity.Property(e => e.FcComentarioResolucion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcComentarioResolucion");
            entity.Property(e => e.FcComentarioSolicitante)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcComentarioSolicitante");
            entity.Property(e => e.FdFechaResolucion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaResolucion");
            entity.Property(e => e.FdFechaSolicitante)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaSolicitante");
            entity.Property(e => e.FiIdestatusResolucion).HasColumnName("fiIDEstatusResolucion");
            entity.Property(e => e.FiIdrazonSolicitante).HasColumnName("fiIDRazonSolicitante");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdusuarioResolucion).HasColumnName("fiIDUsuarioResolucion");
            entity.Property(e => e.FiIdusuarioSolicitante).HasColumnName("fiIDUsuarioSolicitante");
        });

        modelBuilder.Entity<OrionSolicitudDetalleClienteServicioContratado>(entity =>
        {
            entity.HasKey(e => e.FiIddetalleClienteServicio);

            entity.ToTable("OrionSolicitud_DetalleCliente_ServicioContratado");

            entity.Property(e => e.FiIddetalleClienteServicio).HasColumnName("fiIDDetalleCliente_Servicio");
            entity.Property(e => e.FcIp)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIP");
            entity.Property(e => e.FcMac)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcMac");
            entity.Property(e => e.FcNombreWifi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcNombreWifi");
            entity.Property(e => e.FcPom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcPom");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaModificacion");
            entity.Property(e => e.FiIdolt).HasColumnName("fiIDOLT");
            entity.Property(e => e.FiIdorionSolicitud).HasColumnName("fiIDOrionSolicitud");
            entity.Property(e => e.FiUsuarioCreacion).HasColumnName("fiUsuarioCreacion");
            entity.Property(e => e.FiUsuarioModificacion).HasColumnName("fiUsuarioModificacion");
        });

        modelBuilder.Entity<OrionSolicitudDocumento>(entity =>
        {
            entity.HasKey(e => e.FiIdorionDocumento);

            entity.ToTable("OrionSolicitud_Documentos");

            entity.Property(e => e.FiIdorionDocumento).HasColumnName("fiIDOrion_Documento");
            entity.Property(e => e.FcComentario)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcComentario");
            entity.Property(e => e.FcExtension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("fcExtension");
            entity.Property(e => e.FcHashTag)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcHashTag");
            entity.Property(e => e.FcNombreArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcNombreArchivo");
            entity.Property(e => e.FcRutaArchivo)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcRutaArchivo");
            entity.Property(e => e.FcUrl)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcURL");
            entity.Property(e => e.FdFechaCreado)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreado");
            entity.Property(e => e.FiArchivoActivo).HasColumnName("fiArchivoActivo");
            entity.Property(e => e.FiEstadoFirmaDocumento).HasColumnName("fiEstadoFirmaDocumento");
            entity.Property(e => e.FiIddocumento).HasColumnName("fiIDDocumento");
            entity.Property(e => e.FiIdorionSolicitud).HasColumnName("fiIDOrionSolicitud");
            entity.Property(e => e.FiIdsolicitudFirma).HasColumnName("fiIDSolicitudFirma");
            entity.Property(e => e.FiIdusuarioCreador).HasColumnName("fiIDUsuarioCreador");
        });

        modelBuilder.Entity<OrionSolicitudEquifaxCliente>(entity =>
        {
            entity.HasKey(e => e.FiIdorionSolicitudEquifaxCliente).HasName("PK__OrionSol__53F9B848DC7DFD72");

            entity.ToTable("OrionSolicitud_EquifaxCliente");

            entity.Property(e => e.FiIdorionSolicitudEquifaxCliente).HasColumnName("fiIDOrionSolicitud_EquifaxCliente");
            entity.Property(e => e.FcCodigoCliente)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("fcCodigoCliente");
            entity.Property(e => e.FiIdequifaxCliente).HasColumnName("fiIDEquifax_Cliente");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiNumeroConsecutivoCliente).HasColumnName("fiNumeroConsecutivoCliente");
        });

        modelBuilder.Entity<OrionSolicitudHistorialMantenimiento>(entity =>
        {
            entity.HasKey(e => e.FiIdsolicitudHistorialMantenimiento).HasName("PK__OrionSol__E74327645940F519");

            entity.ToTable("OrionSolicitud_HistorialMantenimientos");

            entity.Property(e => e.FiIdsolicitudHistorialMantenimiento).HasColumnName("fiIDSolicitudHistorialMantenimiento");
            entity.Property(e => e.FcObservaciones)
                .HasMaxLength(200)
                .HasColumnName("fcObservaciones");
            entity.Property(e => e.FcOpcionSeleccionada)
                .HasMaxLength(300)
                .HasColumnName("fcOpcionSeleccionada");
            entity.Property(e => e.FdFechaMantenimiento)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaMantenimiento");
            entity.Property(e => e.FiEstadoMantenimiento).HasColumnName("fiEstadoMantenimiento");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
        });

        modelBuilder.Entity<OrionSolicitudMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdsolicitud);

            entity.ToTable("OrionSolicitud_Maestro");

            entity.Property(e => e.FiIdsolicitud)
                .ValueGeneratedNever()
                .HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FcCodigoVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcCodigoVendedor");
            entity.Property(e => e.FcComentarioPagoInicial)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcComentarioPagoInicial");
            entity.Property(e => e.FcComentarioResolucion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcComentarioResolucion");
            entity.Property(e => e.FcIdprestamo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIDPrestamo");
            entity.Property(e => e.FcNombreEmpresaJuridica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNombreEmpresaJuridica");
            entity.Property(e => e.FcOrigen)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcOrigen");
            entity.Property(e => e.FcRtnEmpresaJuridico)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcRtnEmpresaJuridico");
            entity.Property(e => e.FdFechaCreacionSolicitud)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacionSolicitud");
            entity.Property(e => e.FdFechaFinalizaciondeCredito)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaFinalizaciondeCredito");
            entity.Property(e => e.FdFechaIniciodeCredito)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaIniciodeCredito");
            entity.Property(e => e.FdFechaPagoInicial)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaPagoInicial");
            entity.Property(e => e.FdFinFirma)
                .HasColumnType("datetime")
                .HasColumnName("fdFinFirma");
            entity.Property(e => e.FiDiaPago).HasColumnName("fiDiaPago");
            entity.Property(e => e.FiEstadoSolicitud).HasColumnName("fiEstadoSolicitud");
            entity.Property(e => e.FiIdcliente).HasColumnName("fiIDCliente");
            entity.Property(e => e.FiIdestadoPago).HasColumnName("fiIDEstadoPago");
            entity.Property(e => e.FiIdfondo).HasColumnName("fiIDFondo");
            entity.Property(e => e.FiIdidentidadSubida).HasColumnName("fiIDIdentidadSubida");
            entity.Property(e => e.FiIdmoneda).HasColumnName("fiIDMoneda");
            entity.Property(e => e.FiIdorigen).HasColumnName("fiIDOrigen");
            entity.Property(e => e.FiIdpagoInicial).HasColumnName("fiIDPagoInicial");
            entity.Property(e => e.FiIdselfieSubida).HasColumnName("fiIDSelfieSubida");
            entity.Property(e => e.FiIdtipoCliente).HasColumnName("fiIDTipoCliente");
            entity.Property(e => e.FiIdtipoSolicitud).HasColumnName("fiIDTipoSolicitud");
            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
            entity.Property(e => e.FiPlazoSeleccionado).HasColumnName("fiPlazoSeleccionado");
            entity.Property(e => e.FnCuotaMensual)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnCuotaMensual");
            entity.Property(e => e.FnMontoFinalFinanciar)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnMontoFinalFinanciar");
            entity.Property(e => e.FnTasaAnual)
                .HasColumnType("decimal(13, 6)")
                .HasColumnName("fnTasaAnual");
            entity.Property(e => e.FnTasaMensual)
                .HasColumnType("decimal(13, 6)")
                .HasColumnName("fnTasaMensual");
            entity.Property(e => e.FnTotalValorContrato)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnTotalValorContrato");
            entity.Property(e => e.FnValorGarantia)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorGarantia");
            entity.Property(e => e.FnValorReembolso)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorReembolso");
        });

        modelBuilder.Entity<PagosPaginaWebDeposito>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Pagos_PaginaWeb_Depositos");

            entity.Property(e => e.FcArchivo)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcArchivo");
            entity.Property(e => e.FcComentarioCliente)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcComentarioCliente");
            entity.Property(e => e.FcComentarioUsuario)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcComentarioUsuario");
            entity.Property(e => e.FcIdcliente)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcIDCliente");
            entity.Property(e => e.FcIpcliente)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("fcIPCliente");
            entity.Property(e => e.FcIpservidorUbicacion)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("fcIPServidorUbicacion");
            entity.Property(e => e.FcIpusuario)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("fcIPUsuario");
            entity.Property(e => e.FcNombreCliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNombreCliente");
            entity.Property(e => e.FcTelefonoCliente)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcTelefonoCliente");
            entity.Property(e => e.FcToken)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FcUbicacionLocal)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcUbicacionLocal");
            entity.Property(e => e.FcUrlarchivo)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcURLArchivo");
            entity.Property(e => e.FdFechaAplicaPago)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaAplicaPago");
            entity.Property(e => e.FdFechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaRegistro");
            entity.Property(e => e.FiEstadodelDeposito).HasColumnName("fiEstadodelDeposito");
            entity.Property(e => e.FiIdapp).HasColumnName("fiIDApp");
            entity.Property(e => e.FiIdtransaccion).HasColumnName("fiIDTransaccion");
            entity.Property(e => e.FiIdunico)
                .ValueGeneratedOnAdd()
                .HasColumnName("fiIDUnico");
            entity.Property(e => e.FiIdusuarioAplicaPago).HasColumnName("fiIDUsuarioAplicaPago");
            entity.Property(e => e.FiIdusuarioOrigen).HasColumnName("fiIDUsuarioOrigen");
            entity.Property(e => e.FnValordelDeposito)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValordelDeposito");
        });

        modelBuilder.Entity<PaquetesDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Paquetes_Detalle");

            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FiCantidad).HasColumnName("fiCantidad");
            entity.Property(e => e.FiIdpaquete).HasColumnName("fiIDPaquete");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
        });

        modelBuilder.Entity<PaquetesMaestro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Paquetes_Maestro");

            entity.Property(e => e.FcPaquete)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fcPaquete");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiEstadoPaquete)
                .HasDefaultValue(1)
                .HasColumnName("fiEstadoPaquete");
            entity.Property(e => e.FiIdpaquete).HasColumnName("fiIDPaquete");
            entity.Property(e => e.FiIdusuarioCreador).HasColumnName("fiIDUsuarioCreador");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
            entity.Property(e => e.FnTasadeInteresAnual)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("fnTasadeInteresAnual");
            entity.Property(e => e.FnValorMensual)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorMensual");
        });

        modelBuilder.Entity<ParametrosConversionDeMoneda>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Parametros_ConversionDeMonedas");

            entity.Property(e => e.FiAno)
                .HasColumnType("decimal(4, 0)")
                .HasColumnName("fiAno");
            entity.Property(e => e.FiCodPaisDestino).HasColumnName("fiCodPaisDestino");
            entity.Property(e => e.FiCodPaisOrigen).HasColumnName("fiCodPaisOrigen");
            entity.Property(e => e.FiMes).HasColumnName("fiMes");
            entity.Property(e => e.FnTasadeCambio)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("fnTasadeCambio");
        });

        modelBuilder.Entity<PrivilegiosPorRol>(entity =>
        {
            entity.HasKey(e => e.PkIdPrivilegiosPorRol).HasName("PK__Privileg__6D879350239E4DCF");

            entity.ToTable("PrivilegiosPorRol");

            entity.Property(e => e.PkIdPrivilegiosPorRol).HasColumnName("Pk_IdPrivilegiosPorRol");
            entity.Property(e => e.FkIdPermiso)
                .IsRequired()
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("Fk_IdPermiso");
            entity.Property(e => e.FkIdRol).HasColumnName("Fk_IdRol");

            entity.HasOne(d => d.FkIdPermisoNavigation).WithMany(p => p.PrivilegiosPorRols)
                .HasForeignKey(d => d.FkIdPermiso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Privilegi__Fk_Id__3E1D39E1");

            entity.HasOne(d => d.FkIdRolNavigation).WithMany(p => p.PrivilegiosPorRols)
                .HasForeignKey(d => d.FkIdRol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Privilegi__Fk_Id__3D2915A8");
        });

        modelBuilder.Entity<ProductoPreciosDetalle>(entity =>
        {
            entity.HasKey(e => e.FiIdProductoPreciosDetalle).HasName("PK__Producto__D822B445A5E4284D");

            entity.ToTable("Producto_Precios_Detalle");

            entity.Property(e => e.FiIdProductoPreciosDetalle).HasColumnName("fiIdProductoPreciosDetalle");
            entity.Property(e => e.FbEstadoPrecio).HasColumnName("fbEstadoPrecio");
            entity.Property(e => e.FbEstadoPrecioActual).HasColumnName("fbEstadoPrecioActual");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
            entity.Property(e => e.FnPorcentajeImpuesto1)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnPorcentajeImpuesto1");
            entity.Property(e => e.FnPorcentajeImpuesto2)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnPorcentajeImpuesto2");
            entity.Property(e => e.FnTasaAnualPlana)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnTasaAnualPlana");
            entity.Property(e => e.FnValorCuotaCapital)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaCapital");
            entity.Property(e => e.FnValorCuotaInteres)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaInteres");
            entity.Property(e => e.FnValorCuotaMensual)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual");
            entity.Property(e => e.FnValorCuotaMensual12Cliente)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual12Cliente");
            entity.Property(e => e.FnValorCuotaMensual12Nuevo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual12Nuevo");
            entity.Property(e => e.FnValorCuotaMensual24Cliente)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual24Cliente");
            entity.Property(e => e.FnValorCuotaMensual24Nuevo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual24Nuevo");
            entity.Property(e => e.FnValorProductoMe)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorProductoME");
            entity.Property(e => e.FnValorProductoMn)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorProductoMN");
        });

        modelBuilder.Entity<ProductosInventario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Productos_Inventario");

            entity.Property(e => e.FcNumerodeSerie1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcNumerodeSerie1");
            entity.Property(e => e.FcNumerodeSerie2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcNumerodeSerie2");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiIdcliente).HasColumnName("fiIDCliente");
            entity.Property(e => e.FiIdestadoInventario).HasColumnName("fiIDEstadoInventario");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");
            entity.Property(e => e.FiIdubicacion).HasColumnName("fiIDUbicacion");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
            entity.Property(e => e.FnCantidad)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("fnCantidad");
        });

        modelBuilder.Entity<ProductosMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdproducto).HasName("PK__Producto__5D943CBA8D91125E");

            entity.ToTable("Productos_Maestro");

            entity.Property(e => e.FiIdproducto)
                .ValueGeneratedNever()
                .HasColumnName("fiIDProducto");
            entity.Property(e => e.FbProductoSeleccionablePorCliente)
                .HasDefaultValue(false)
                .HasColumnName("fbProductoSeleccionablePorCliente");
            entity.Property(e => e.FcCodigodeBarras)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcCodigodeBarras");
            entity.Property(e => e.FcImagenProducto)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcImagenProducto");
            entity.Property(e => e.FcProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcProducto");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaActualizacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiEstadoPrecioActual)
                .HasDefaultValue(1)
                .HasColumnName("fiEstadoPrecioActual");
            entity.Property(e => e.FiEstadoProducto).HasColumnName("fiEstadoProducto");
            entity.Property(e => e.FiIdTipoDeProductoContable).HasColumnName("fiIdTipoDeProductoContable");
            entity.Property(e => e.FiIdmarca).HasColumnName("fiIDMarca");
            entity.Property(e => e.FiIdmodelo).HasColumnName("fiIDModelo");
            entity.Property(e => e.FiIdtipoProducto).HasColumnName("fiIDTipoProducto");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
            entity.Property(e => e.FiProductoEnPaquete)
                .HasDefaultValue(0)
                .HasColumnName("fiProductoEnPaquete");
            entity.Property(e => e.FiProductoInventariable).HasColumnName("fiProductoInventariable");
            entity.Property(e => e.FnPorcentajeImpuesto1)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnPorcentajeImpuesto1");
            entity.Property(e => e.FnPorcentajeImpuesto2)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnPorcentajeImpuesto2");
            entity.Property(e => e.FnTasaAnualPlana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnTasaAnualPlana");
            entity.Property(e => e.FnValorCuotaCapital)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaCapital");
            entity.Property(e => e.FnValorCuotaInteres)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaInteres");
            entity.Property(e => e.FnValorCuotaMensual)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual");
            entity.Property(e => e.FnValorCuotaMensual12Cliente)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual12Cliente");
            entity.Property(e => e.FnValorCuotaMensual12Nuevo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual12Nuevo");
            entity.Property(e => e.FnValorCuotaMensual24Cliente)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual24Cliente");
            entity.Property(e => e.FnValorCuotaMensual24Nuevo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorCuotaMensual24Nuevo");
            entity.Property(e => e.FnValorProductoMe)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorProductoME");
            entity.Property(e => e.FnValorProductoMn)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("fnValorProductoMN");

            entity.HasOne(d => d.FiIdTipoDeProductoContableNavigation).WithMany(p => p.ProductosMaestros)
                .HasForeignKey(d => d.FiIdTipoDeProductoContable)
                .HasConstraintName("FK__Productos__fiIdT__58BC2184");
        });

        modelBuilder.Entity<ProductosMovimientosDetalle>(entity =>
        {
            entity.HasKey(e => e.FiIdmovimiento).HasName("PK__Producto__4C4A0155B0D27A6F");

            entity.ToTable("Productos_Movimientos_Detalle");

            entity.Property(e => e.FiIdmovimiento)
                .ValueGeneratedNever()
                .HasColumnName("fiIDMovimiento");
            entity.Property(e => e.FcCodigoSerie1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcCodigoSerie1");
            entity.Property(e => e.FcCodigoSerie2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcCodigoSerie2");
            entity.Property(e => e.FcReferenciaMovimiento)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcReferenciaMovimiento");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaMovimiento)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaMovimiento");
            entity.Property(e => e.FiIdProductoPreciosDetalle).HasColumnName("fiIdProductoPreciosDetalle");
            entity.Property(e => e.FiIdmovimientoMaestro).HasColumnName("fiIDMovimientoMaestro");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");
            entity.Property(e => e.FiIdubicacion).HasColumnName("fiIDUbicacion");
            entity.Property(e => e.FiIdusuarioMovimiento).HasColumnName("fiIDUsuarioMovimiento");
            entity.Property(e => e.FiTipoMovimiento).HasColumnName("fiTipoMovimiento");
            entity.Property(e => e.FnCantidad)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("fnCantidad");

            entity.HasOne(d => d.FiIdProductoPreciosDetalleNavigation).WithMany(p => p.ProductosMovimientosDetalles)
                .HasForeignKey(d => d.FiIdProductoPreciosDetalle)
                .HasConstraintName("FK__Productos__fiIdP__0F4D3C5F");
        });

        modelBuilder.Entity<ProductosMovimientosMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdmovimientoMaestro).HasName("PK__Producto__20CAEDE8BB540F59");

            entity.ToTable("Productos_Movimientos_Maestro");

            entity.Property(e => e.FiIdmovimientoMaestro).HasColumnName("fiIDMovimientoMaestro");
            entity.Property(e => e.FbContabilizar).HasColumnName("fbContabilizar");
            entity.Property(e => e.FcCai)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcCAI");
            entity.Property(e => e.FcDescripcionFactura)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("fcDescripcionFactura");
            entity.Property(e => e.FcDocumentoExtension)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcDocumentoExtension");
            entity.Property(e => e.FcDocumentoFactura)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fcDocumentoFactura");
            entity.Property(e => e.FcNumeroFactura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcNumeroFactura");
            entity.Property(e => e.FcPartida)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcPartida");
            entity.Property(e => e.FcReferenciaFactura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcReferenciaFactura");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaFactura");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiEstadoMovimientoMaestro).HasColumnName("fiEstadoMovimientoMaestro");
            entity.Property(e => e.FiIdmoneda).HasColumnName("fiIDMoneda");
            entity.Property(e => e.FiIdproveedor).HasColumnName("fiIDProveedor");
            entity.Property(e => e.FiIdtipoMovimiento).HasColumnName("fiIDTipoMovimiento");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
            entity.Property(e => e.FnImporteExento)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnImporteExento");
            entity.Property(e => e.FnImporteExonerado)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnImporteExonerado");
            entity.Property(e => e.FnImporteGravado)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnImporteGravado");
            entity.Property(e => e.FnIsv)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnISV");
            entity.Property(e => e.FnSaldo)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnSaldo");
            entity.Property(e => e.FnTasaAnualPlana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnTasaAnualPlana");
            entity.Property(e => e.FnTotalFactura)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnTotalFactura");
            entity.Property(e => e.FnValorCuotaCapital)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnValorCuotaCapital");
            entity.Property(e => e.FnValorCuotaInteres)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnValorCuotaInteres");
            entity.Property(e => e.FnValorCuotaMensual)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("fnValorCuotaMensual");

            entity.HasOne(d => d.FiIdproveedorNavigation).WithMany(p => p.ProductosMovimientosMaestros)
                .HasForeignKey(d => d.FiIdproveedor)
                .HasConstraintName("FK__Productos__fiIDP__0A888742");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.PkIdRol).HasName("PK__Roles__58DBEFAA1FCDBCEB");

            entity.Property(e => e.PkIdRol).HasColumnName("Pk_IdRol");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Observacion).HasMaxLength(255);
        });

        modelBuilder.Entity<RolesPorUsuario>(entity =>
        {
            entity.HasKey(e => e.PkIdRolesPorUsuario).HasName("PK__RolesPor__FBEECC9529572725");

            entity.ToTable("RolesPorUsuario");

            entity.Property(e => e.PkIdRolesPorUsuario).HasColumnName("Pk_IdRolesPorUsuario");
            entity.Property(e => e.FkIdRol).HasColumnName("Fk_IdRol");
            entity.Property(e => e.FkIdUsuario).HasColumnName("Fk_IdUsuario");

            entity.HasOne(d => d.FkIdRolNavigation).WithMany(p => p.RolesPorUsuarios)
                .HasForeignKey(d => d.FkIdRol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolesPorU__Fk_Id__2C3393D0");

            entity.HasOne(d => d.FkIdUsuarioNavigation).WithMany(p => p.RolesPorUsuarios)
                .HasForeignKey(d => d.FkIdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolesPorU__Fk_Id__4D5F7D71");
        });

        modelBuilder.Entity<SolicitudInstalacionBitacora>(entity =>
        {
            entity.HasKey(e => e.FiIdbitacoraSolicitudInstalacion).HasName("PK__Solicitu__3F3EC20EB2042CC5");

            entity.ToTable("Solicitud_Instalacion_Bitacoras");

            entity.Property(e => e.FiIdbitacoraSolicitudInstalacion).HasColumnName("fiIDbitacoraSolicitudInstalacion");
            entity.Property(e => e.FcComentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcComentario");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FiIdUsuarioCreacion).HasColumnName("fiIdUsuarioCreacion");
            entity.Property(e => e.FiIdsolicitudInstalacion).HasColumnName("fiIDSolicitudInstalacion");
        });

        modelBuilder.Entity<SolicitudInstalacionDocumento>(entity =>
        {
            entity.HasKey(e => e.FiIdsolicitudInstalacion).HasName("PK__Solicitu__8A139ABE20A452B0");

            entity.ToTable("SolicitudInstalacion_Documentos");

            entity.Property(e => e.FiIdsolicitudInstalacion).HasColumnName("fiIDSolicitudInstalacion");
            entity.Property(e => e.FcExtension)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcExtension");
            entity.Property(e => e.FcNombreDocumento)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fcNombreDocumento");
            entity.Property(e => e.FcUrlDocumento)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("fcUrlDocumento");
            entity.Property(e => e.FiIdcatalogoFotoInstalacion).HasColumnName("fiIDCatalogoFotoInstalacion");
            entity.Property(e => e.FiIdcontratistaSolicitud).HasColumnName("fiIDContratistaSolicitud");
        });

        modelBuilder.Entity<SolicitudesAdicionProductoDetalle>(entity =>
        {
            entity.HasKey(e => e.FiIdadicionProdutoDetalle).HasName("PK_Solicitudes_AdicionProducto_Detalle_fiIDAdicionProdutoDetalle");

            entity.ToTable("Solicitudes_AdicionProducto_Detalle");

            entity.Property(e => e.FiIdadicionProdutoDetalle).HasColumnName("fiIDAdicionProdutoDetalle");
            entity.Property(e => e.FiCantidad).HasColumnName("fiCantidad");
            entity.Property(e => e.FiIdadicionProduto).HasColumnName("fiIDAdicionProduto");
            entity.Property(e => e.FiIdproducto).HasColumnName("fiIDProducto");

            entity.HasOne(d => d.FiIdadicionProdutoNavigation).WithMany(p => p.SolicitudesAdicionProductoDetalles)
                .HasForeignKey(d => d.FiIdadicionProduto)
                .HasConstraintName("FK_Solicitudes_AdicionProducto_Detalle_fiIDAdicionProduto");

            entity.HasOne(d => d.FiIdproductoNavigation).WithMany(p => p.SolicitudesAdicionProductoDetalles)
                .HasForeignKey(d => d.FiIdproducto)
                .HasConstraintName("FK_Solicitudes_AdicionProducto_Detalle_fiIDProducto");
        });

        modelBuilder.Entity<SolicitudesAdicionProductoMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdadicionProduto).HasName("PK_Solicitudes_AdicionProducto_Maestro_fiIDAdicionProduto");

            entity.ToTable("Solicitudes_AdicionProducto_Maestro");

            entity.Property(e => e.FiIdadicionProduto).HasColumnName("fiIDAdicionProduto");
            entity.Property(e => e.FdFechadeCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechadeCreacion");
            entity.Property(e => e.FdFechadeSolicitud)
                .HasColumnType("datetime")
                .HasColumnName("fdFechadeSolicitud");
            entity.Property(e => e.FiIdsolicitud).HasColumnName("fiIDSolicitud");

            entity.HasOne(d => d.FiIdsolicitudNavigation).WithMany(p => p.SolicitudesAdicionProductoMaestros)
                .HasForeignKey(d => d.FiIdsolicitud)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Solicitudes_AdicionProducto_Maestro_fiIDCliente");
        });

        modelBuilder.Entity<TecnicosPorContratistum>(entity =>
        {
            entity.HasKey(e => e.FiIdtecnicosPorContratista).HasName("PK__Tecnicos__3BDB27CF3FDDB760");

            entity.Property(e => e.FiIdtecnicosPorContratista).HasColumnName("fiIDTecnicosPorContratista");
            entity.Property(e => e.FcToken)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FdFechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaCreacion");
            entity.Property(e => e.FdFechaUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimaModificacion");
            entity.Property(e => e.FiEstadoTecnicoPorContratista).HasColumnName("fiEstadoTecnicoPorContratista");
            entity.Property(e => e.FiIdusuarioContratista).HasColumnName("fiIDUsuarioContratista");
            entity.Property(e => e.FiIdusuarioCreacion).HasColumnName("fiIDUsuarioCreacion");
            entity.Property(e => e.FiIdusuarioTecnico).HasColumnName("fiIDUsuarioTecnico");
            entity.Property(e => e.FiIdusuarioUltimaModificacion).HasColumnName("fiIDUsuarioUltimaModificacion");
        });

        modelBuilder.Entity<Temporalprueba>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__temporal__3213E83F2F65E4EF");

            entity.ToTable("temporalpruebas");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.String)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("string");
        });

        modelBuilder.Entity<UsuariosMaestro>(entity =>
        {
            entity.HasKey(e => e.FiIdusuario).HasName("fiIDUsuario__334192061B0907CE");

            entity.ToTable("Usuarios_Maestro");

            entity.Property(e => e.FiIdusuario).HasColumnName("fiIDUsuario");
            entity.Property(e => e.FcBuzondeCorreo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fcBuzondeCorreo");
            entity.Property(e => e.FcCentrodeCosto)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fcCentrodeCosto");
            entity.Property(e => e.FcDireccionFisica)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fcDireccionFisica");
            entity.Property(e => e.FcDocumentoIdentificacion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcDocumentoIdentificacion");
            entity.Property(e => e.FcIdAspnetUser)
                .IsRequired()
                .HasMaxLength(128)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcIdAspnetUser");
            entity.Property(e => e.FcNombreCorto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcNombreCorto");
            entity.Property(e => e.FcPassword)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcPassword");
            entity.Property(e => e.FcPasswordToken)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fcPasswordToken");
            entity.Property(e => e.FcPrimerApellido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcPrimerApellido");
            entity.Property(e => e.FcPrimerNombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcPrimerNombre");
            entity.Property(e => e.FcSegundoApellido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcSegundoApellido");
            entity.Property(e => e.FcSegundoNombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fcSegundoNombre");
            entity.Property(e => e.FcTelefonoMovil)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fcTelefonoMovil");
            entity.Property(e => e.FcToken)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fcToken");
            entity.Property(e => e.FcUrlImage)
                .IsUnicode(false)
                .UseCollation("Modern_Spanish_CI_AS")
                .HasColumnName("fcUrlImage");
            entity.Property(e => e.FcUsuarioDominio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fcUsuarioDominio");
            entity.Property(e => e.FdFechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaAlta");
            entity.Property(e => e.FdFechaBaja)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaBaja");
            entity.Property(e => e.FdFechaUltimoCambiodePassword)
                .HasColumnType("datetime")
                .HasColumnName("fdFechaUltimoCambiodePassword");
            entity.Property(e => e.FiEstado).HasColumnName("fiEstado");
            entity.Property(e => e.FiIddepartamento).HasColumnName("fiIDDepartamento");
            entity.Property(e => e.FiIddominioCorreo).HasColumnName("fiIDDominioCorreo");
            entity.Property(e => e.FiIddominioRed).HasColumnName("fiIDDominioRed");
            entity.Property(e => e.FiIdempresa).HasColumnName("fiIDEmpresa");
            entity.Property(e => e.FiIdjefeInmediato).HasColumnName("fiIDJefeInmediato");
            entity.Property(e => e.FiIdpuesto).HasColumnName("fiIDPuesto");
            entity.Property(e => e.FiIdusuarioCreador).HasColumnName("fiIDUsuarioCreador");
            entity.Property(e => e.FiIdusuarioSolicitante).HasColumnName("fiIDUsuarioSolicitante");
            entity.Property(e => e.FiTipoUsuario).HasColumnName("fiTipoUsuario");

            entity.HasOne(d => d.FcIdAspnetUserNavigation).WithMany(p => p.UsuariosMaestros)
                .HasForeignKey(d => d.FcIdAspnetUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Usuarios__IdAspn__1CF15040");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}